锁:		锁是计算机协调多个进程或线程访问资源的机制
		保证数据的并发访问一致性和有效性


分类:	按照粒度分
	全局锁:	锁住所有表
	表级锁:	锁住某张表
	行级锁:	锁住某表的某行数据


全局锁:		对整个数据库实例加锁,只读,后续dml写数据,ddl语句,以及更新操作的事务提交语句都被阻塞
	应用:	做全库的逻辑备份,对所有表锁定,从而获取一致性视图,保证数据完整

	语法:
		加全局锁:	flush tables with read lock;
		数据备份:	mysqldump -uroot -p password 数据库名>对应sql文件.sql
		解锁:		unlock tables;

	特点:	主库上备份,那么备份时不能执行更新
		从库上备份,那么在备份时从库不能执行主库同步来的二进制日志,导致主从延迟
	
		在innodb引擎中,备份时加参数 --single-transaction参数来完成不加锁的一致性数据备份

		mysqldump --single-transaction -uroot -p password 数据库名>对应sql文件.sql


表级锁:	每次操作锁住整张表,粒度大,锁冲突概率高.并发低.在MyISAM,Innodb,BDB等引擎都支持
		
	表级锁分类:
	表锁:		
		表共享读锁,表独占写锁:	
			加锁: 	lock tables 表名 read/write
			释放锁:	unlock tables / 客户端断开连接
				
		特点:	读锁是阻塞其他客户端的写操作
			写锁是阻塞其他客户端的读操作和写操作
								
	元数据锁(meta data lock,MDL):	
		加锁过程是系统自动控制,不用显示使用,访问一张表的时候自动加锁
		MDL排他锁,MDL共享读锁,MDL共享写锁
			
		作用:	维护表元数据的数据一致性,在表上有活动事务时,不对元数据进行写操作

			也就是在表中有事务的时候,不能修改表的表结构
			避免DML与DDL冲突,保证读写正确性
				
			mysql5.5后引入MDL,
				对表查询时,加DML共享读锁,与MDL共享写锁兼容
				对表增删改的时候,加MDL共享写锁,与MDL共享读锁兼容
			  	对表结构变更的时候,加MDL排他锁,与其他MDL锁互斥
	
		查看元数据锁:	
			select 
			object_type,object_name,lock_type,lock_duration 
			from performance_schema.metadata_locks;
	

	意向锁:		为了避免DML执行时,加的行锁和表锁的冲突,innodb引入意向锁
			表锁不用检查每行数据是否加锁,用意向锁减少表锁检查
			
		意向锁也是系统自动控制的

		意向共享锁:	select添加
		意向排他锁:	insert,update,delete,select for update添加

		意向共享锁和表锁共享读锁兼容,与表锁排他锁互斥
		意向排他锁和表锁共享锁以及排他锁都互斥.意向锁之间不会互斥

		查看意向锁以及行锁情况:
		select 	object_schema,object_name,index_name,lock_type,lock_mode,lock_data 
		from performance_schema,data_locks


	行级锁:		每次加锁锁住行数据,粒度最小,锁冲突概率最低,并发最高,应用于innodb

		innodb中数据基于索引,行锁是通过对索引项加锁实现,而不是对记录加锁.

		行锁:	锁住单行记录的锁,防止其他事务进行uodate和delete.在RC,RR隔离级别下支持
			
		间隙锁:	锁住索引记录间隙,确保索引记录间隙不变,防止insert产生幻读,RR支持

		临建锁:	行锁和间隙锁组合,同时锁住数据和间隙,RR支持

			共享锁(S):允许事务读一行,阻止其他事务获得相同数据集的排他锁
			排他锁(X):允许获取排他锁的事务写数据,阻止其他事务获得相同数据的共享,排他锁
				共享锁和共享锁兼容,
				共享锁和排他锁互斥,
				排他锁和排他锁互斥

			增删改				排他锁
			select				不加锁
			select ..for update 		排他锁
			select ..lock in share mode 	共享锁

		针对唯一索引检索时,对已存在的记录进行等值匹配时,就自动优化我行锁
		innodb行锁针对索引加锁,
			如果不通过索引条件检索数据,那么innodb将对表中的索引记录加锁,即升级为表锁


		默认情况下,innodb在RR事务隔离下运行,innodb用next-key锁进行搜索和索引扫描,防幻读
			索引上等值查询(唯一索引),给不存在的记录加锁时,优化为间隙锁
			索引上等值查询(普通索引),向右遍历时最后一个值不满足查询需求时,
						next-key lock退化为间隙锁
			索引上范围查询(唯一索引),会访问到不满足条件的第一个值为止

			间隙锁的目的就是防止其他事务插入间隙,间隙锁可以共存.
				间隙锁不会阻止别的事务在同一间隙上加间隙锁
		


