CAS（Compare and Swap）是一种无锁原子算法，
		基于CPU的原子指令实现的，可以保证多线程环境下对共享变量的操作不会发生冲突。

CAS算法需要三个操作数：	内存位置V，预期值A，新值B。

	算法的执行过程是：
		比较内存位置V的值是否等于预期值A，如果相等，就将V的值更新为新值B，否则不做任何操作。


CAS算法的优点:	可以避免使用锁机制，提高了并发性能和效率。

CAS算法缺点，主要有以下几个方面：

	ABA问题：	如果一个值原来是A，被修改为B，然后又被修改回A，
			那么使用CAS比较时会认为没有发生变化，但实际上已经发生了两次修改。
			这可能导致一些逻辑错误。

			解决方法:使用版本号或者原子引用来标记变量的状态。

	循环时间长开销大：如果CAS操作失败，需要不断地重试，会消耗CPU资源和时间。
			如果竞争激烈或者线程数过多，可能导致性能下降。
			
			解决方法:限制重试次数或者使用其他的无锁算法。

	只能保证一个共享变量的原子操作：
			如果需要对多个共享变量进行原子操作，就无法使用单个CAS指令来实现。

			解决方法:使用锁机制或者将多个变量合并成一个变量来操作。