自动装箱与拆箱

	Java语言在JDK5中引入的特性，可在使用基本数据类型和包装类之间进行转换时更加方便和简洁。

	基本数据类型有八种，分别是byte、short、int、long、float、double、char和boolean，
		它们是直接存储在栈内存中的数值，不具有对象的特性。

	包装类对应于基本数据类型，
		分别是Byte、Short、Integer、Long、Float、Double、Character和Boolean，
		存储在堆内存中的对象，具有对象的特性，如方法和属性。


自动装箱就是将基本数据类型自动转换为对应的包装类对象
	Integer i = 10; // 将int类型的10自动装箱为Integer对象

自动拆箱就是将包装类对象自动转换为对应的基本数据类型，
	int j = i; // 将Integer对象i自动拆箱为int类型的j

自动装箱和拆箱的实现原理是通过调用包装类的静态方法和实例方法来完成。
	如，上面的代码经过反编译后可以得到：
		// 调用Integer类的静态方法valueOf将int类型的10转换为Integer对象
		Integer i = Integer.valueOf(10); 
		// 调用Integer对象i的实例方法intValue将i转换为int类型的j
		int j = i.intValue(); 


优势:
	自动装箱和拆箱在编写代码时不用关心基本数据类型和包装类之间的转换，提高了编程效率和可读性。

缺点和风险:
	自动装箱和拆箱会增加内存开销和性能损耗，因为每次转换都需要创建或销毁对象。
	自动装箱和拆箱可能会导致空指针异常（NullPointerException），
		因为包装类对象可能为null，而基本数据类型不能为null。
	自动装箱和拆箱可能会导致逻辑错误或意外结果，
		因为包装类对象间的比较是按引用比较的，而基本数据类型之间的比较是按照数值比较的。
