Semaphore（信号量）是一种并发编程的工具，可以用来控制对共享资源的访问，实现线程间的同步和协作。


基本思想：
	维护一个计数器，表示可用的资源数量
	当一个线程需要获取资源时，就将计数器减一，
		如果计数器大于等于零，表示成功获取资源；
		如果计数器小于零，表示失败获取资源，就将当前线程阻塞，直到其他线程释放资源时唤醒它。
	当一个线程释放资源时，就将计数器加一，并通知等待的线程。

Semaphore有两种类型：公平和非公平。
	公平的Semaphore:		按照线程请求资源的顺序来分配资源，保证先到先得；

	非公平的Semaphore:	不考虑线程请求资源顺序，随机分配资源，可能导致某些线程长时间等待。


Semaphore在Java中有对应的类：java.util.concurrent.Semaphore，提供了以下几个主要的方法：

	Semaphore(int permits)：		
			构造一个具有指定许可数和非公平的信号量。
	
	Semaphore(int permits, boolean fair)：
			构造一个具有指定许可数和指定是否公平的信号量。
	
	void acquire()：
			从信号量中获取一个许可，没有可用许可就阻塞当前线程，直到其他线程释放许可。

	void acquire(int permits)：
			从信号量中获取指定数量的许可，没有足够的许可就阻塞当前线程，
			直到有其他线程释放足够的许可。

	void release()：
			向信号量中释放一个许可，并通知等待的线程。

	void release(int permits)：
			向信号量中释放指定数量的许可，并通知等待的线程。
	
	int availablePermits()：
			返回信号量中当前可用的许可数。

