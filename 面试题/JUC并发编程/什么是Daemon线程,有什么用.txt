Daemon线程（守护线程）是一种特殊的线程，

作用:	为其他线程（用户线程）提供服务，如垃圾回收线程、定时任务线程等。

意义:	
	提高系统的稳定性和效率：
		Daemon线程可以在后台执行一些系统级别的任务，
		如清理内存、释放资源、监控状态等，从而保证系统的正常运行和性能优化。

	减少程序的开发和维护成本：
		Daemon线程可以封装一些复杂和重复的逻辑，如定时器、事件监听器、日志记录器等，
		从而简化程序的开发和维护，提高代码的可读性和可重用性。

	增加程序的灵活性和扩展性：
		Daemon线程可以根据不同的需求和场景来创建和配置，
		如设置优先级、是否为守护线程、异常处理器等，从而增加程序的灵活性和扩展性

特点：
	Daemon线程的生命周期依赖于用户线程，当所有的用户线程都结束后，Daemon线程也会自动结束，
		不会阻止程序的退出。

	Daemon线程的优先级比较低，一般不会占用太多的CPU资源。

	Daemon线程不能访问重要的系统资源，如文件、数据库等，因为它们可能在任何时候被终止。

	Java中，可以通过Thread类的setDaemon(boolean on)方法设置一个线程是否为Daemon线程，
		必须在启动线程之前调用该方法。
		也可以通过Thread类的isDaemon()方法来判断一个线程是否为Daemon线程。