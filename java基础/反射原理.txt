Java中的反射机制:
		指在运行时动态地获取类的信息并操作类的属性、方法和构造函数等。


Java中的反射机制主要由以下类来实现：
		java.lang.Class、java.lang.reflect.Constructor、java.lang.reflect.Field和java.lang.reflect.Method等
		其中，Class类是Java反射机制的起源和入口，用于获取与类相关的信息，提供了获取类信息的相关方法

		通过反射，可以在运行时动态地创建对象并调用其属性和方法，不需要在编译期知道运行的对象是谁。

		反射机制常用于框架和工具代码中，因为它们对于灵活性的要求较高，在实际的业务代码中,
				其实使用反射并不多。

具体来说，Java中的反射机制主要包括以下几个方面：

	1. 获取Class对象：	在Java中，每个类都有一个对应的Class对象，可以通过该对象获取与类相关的各种信息。
	2. 创建对象：	通过Class对象可以在运行时动态地创建一个类的实例。
	3. 获取属性：	通过Class对象可以获取一个类的所有属性，包括公有属性和私有属性。
	4. 获取方法：	通过Class对象可以获取一个类的所有方法，包括公有方法和私有方法。
	5. 调用方法：	通过Method对象可以调用一个类的方法。

Java中的反射机制是基于JVM实现的。
		在Java程序运行时，JVM会将字节码文件加载到内存中，并为每个类创建一个对应的Class对象。
		通过Class对象，就可以在运行时动态地获取类的信息并操作类的属性、方法和构造函数等。
		
		需要注意的是，反射机制会消耗一定的系统资源，并可能会破坏封装性而导致安全问题。
		因此，在使用反射机制时需要谨慎处理。


	字节码文件是加载在方法区中的
	在java7和之前,	方法区是在永久代中
	java8之后,		永久代变成了元空间
