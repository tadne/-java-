JVM（Java 虚拟机）
	一种能够运行 Java 字节码的抽象计算机，
	可以实现 Java 语言的跨平台特性，保证了 Java 程序的一致性和安全性。

JVM 的主要组成部分和作用有以下几个：

类加载器（Class Loader）：
	类加载器是负责加载 Java 类到 JVM 中的组件，可以从不同的来源获取类的二进制数据，
	并在方法区中存储类的信息，在堆中创建一个.Class对象，作为方法区中类信息的访问入口。

	类加载器可以分为四种类型：启动类加载器、扩展类加载器、应用类加载器和自定义类加载器。

执行引擎（Execution Engine）：
		执行引擎是负责执行 Java 字节码的组件，可以分为两种模式：解释执行和编译执行。
		解释执行是指逐条解释并执行字节码；
		编译执行是指将字节码转换为本地机器码后再执行。
		执行引擎还包含了一些子组件，如即时编译器（JIT）、垃圾回收器（GC）、线程管理器等。

内存区域（Memory Area）：
		内存区域是 JVM 管理的用于存储数据的空间，它可以分为以下几个部分：

	程序计数器（Program Counter）：
		一块较小的内存空间，用于记录当前线程所执行的字节码的行号，
		保证线程切换后能恢复到正确的执行位置。
		每个线程都有自己的程序计数器，互不影响，生命周期与线程相同。

	虚拟机栈（Java Virtual Machine Stack）：
		一种先进后出的数据结构，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。
		每个方法在执行的时候都会创建一个栈帧，用于存储这些信息。
		每个线程都有自己的虚拟机栈，互不影响，生命周期与线程相同。

	本地方法栈（Native Method Stack）：
		本地方法栈与虚拟机栈类似，用于存储本地方法（Native Method）的调用信息。
		本地方法指使用其他语言实现的方法，通常通过Java Native Interface（JNI）来调用。
		每个线程都有自己的本地方法栈，互不影响，生命周期与线程相同。

	堆（Heap）：
		JVM 管理的最大一块内存空间，它用于存储对象实例和数组等数据。
		堆是被所有线程共享的，可以分为新生代和老年代两个区域，
		分别采用不同的垃圾回收策略。
		堆的大小可以通过 -Xms 和 -Xmx 参数来设置，影响程序的性能和效率。

	方法区（Method Area）：
		与堆相似的内存空间，存储类的元数据、常量池、静态变量、即时编译器编译后的代码等数据。		方法区也是被所有线程共享的，也可以进行垃圾回收。
		Java 8之后的版本中，方法区被移除，取而代之的是元空间（Metaspace），
		使用本地内存来存储类的元数据等信息。


