拦截器Interceptor

拦截器简介
	SpringMVC的拦截器Interceptor是一个接口规范,是对Controller资源访问时进行拦截操作的技术
	拦截后可以进行权限控制,功能增强等,类似Web中的Filter

	拦截器和过滤器的区别
		客户端请求先经过过滤器到前端控制器,再被分发到各个Servlet,再经过拦截器到Controller
	
		过滤器是web的技术,对请求过滤,包括Servlet,jsp等资源
		拦截器是SpringMVC技术,只对MVC管辖范围才拦截,主要拦截Controller请求
		晚于前端控制器执行
	
	HandlerInterceptor接口方法:

		preHandler:	是否放行
				对拦截到的请求预处理,返回true则放行
				参数handler 是拦截到的Controller方法处理器
				返回值,当返回false,代表终止向后执行,后置方法将不执行

		postHandle:	操作模型视图
				在处理器方法执行后,对拦截的请求进行后处理,在方法中对模型/视图修改
				参数Handler是拦截到的Controller方法处理器
				参数ModelAndView是返回的视图对象

		afterCompletion:视图渲染完成后,进行最后处理,如果有异常,可以处理异常
				参数Handler是拦截到的Controller方法处理器
				参数ex是异常对象
		
基本使用
	创建interceptor类实现HandlerInterceptor接口
	重写想要的方法preHandler/postHandler/afterCompletion即可
		
	在mvc的xml中配置拦截器

执行顺序
	多个拦截器执行顺序:默认为mvc的配置顺序
	方法顺序:
		前端控制器发给拦截器,先执行所有拦截器的preHandler,再postHandler,
		再afterCompletion,最后返回到前端控制器

		如果其中某个preHandler返回false,那么它前面的拦截器的afterCompletion会执行
			其他的拦截器的方法都不会执行,包括它后面拦截器的preHandler也不执行
			所有的postHandler都不执行
		
执行原理
	客户端发出请求到前端控制器
	前端控制器通过处理器映射器来找到对应的可以被执行的Interceptor拦截器和对应的Controller
	然后将对应的拦截器和controller都封装成一个对象HandlerExcutionChain
	再由处理器适配器去根据这个处理器链找到对应的处理器处理
	然后调用PostHandler集合和AfterCompletion集合

