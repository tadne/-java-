CAS:	Compare and Swap	乐观锁思想

		先读取共享变量,在修改值前将该值与原值比较,
			如果不同就不修改,再次读取,如果相同就修改退出循环

		为保证变量的可见性,需要用valatile修饰.结合CAS和calatile可以实现无锁并发

		适用于线程低竞争的时候,效率会提示
		但是高竞争会导致修改不停重试导致效率下降

		底层在Unsafe类中有CAS的实现,反射获取,调用即可
			
java中乐观锁与悲观锁:
	乐观锁:CAS		并发情况不怕变量被修改,可以不断重试		
	悲观锁:synchronized	避免其他线程修改变量

	
原子操作类:	(jdk5)juc提供了原子操作类,提供线程安全的操作,如:	AtomicInteger,AtomicBoolean
		












		
	










