IO字节流	
	:	存储和读取数据的解决方案

	分类:		

			字节流Stream				:操作所有文件
			字符流Reader/Writer		:纯文本文件	底层用了缓冲区,效率高

	
	字节输出流:
		创建字节输出流对象
			细节1:	参数是字符串表示的路径或File对象都可以
			细节2:	如果文件不存在会创建一个文件,但要求父路径存在
			细节3:	如果文件已经存在,则默认会清空文件	
			细节4:	如果想要追加写入,那么要在创建对象时,传入true	
			FileOutputStream fos=new FileOutputStream("Path",true);
		写数据
		void write(int a)			一次写一个字节数据
		void write(byte[] b)			一次写一个字节数组数据
		void write(byte[]b,int off,int len)	一次写一个字节数组的部分数据

			细节:	write方法的参数是整数,实际上写到本地文件中是整数在ASCII上对应字符

		释放资源
			每次使用完流之后都要释放资源,不然会内存占用

		

		问题:	换行符
			windows:		\r\n
			Linux:			\n
			Mac:			\r
		细节:	win操作系统中,java对回车有优化,如果我们只写一个\r或者\n,java会自动补全
			

	字节输入流:
		创建字节输入流:
			细节1:	如果文件不存在,直接报错
		读取数据:
			细节1:	一次读一个字节,得到的数据时ASCII对应数字
			细节2:	读到文件末尾,read方法返回-1
		释放资源:
			每次使用完流之后都要释放资源,不然会内存占用


		
		byte[]变量代表了每次拷贝的数量,默认是1.byte数组的长度越大拷贝越快,最多1024

	
		IO异常处理,一个将释放资源的代码放到finally中
		可以通过实现AutoCloseable接口,就可以在特定的情况下,自动释放资源
