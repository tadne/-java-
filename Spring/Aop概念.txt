AOP简介
	
	Aspect Oriented Programming	面向切面编程.是面向对象编程OOP的升华
	OOP是纵向对事物的抽象,一个对象包括静态的属性,动态的方法等
	AOP是横向的对不同事物的抽象,属性与属性,方法与方法,都能组成切面


	纵向:	就是从上往下,在一个类中属性方法的对象
	横向:	从左往右,在不同类中的属性方法的切面

	
AOP技术实现方案
	aop底层就是动态代理
	动态代理:	在运行时,对目标对象的方法进行增强,代理对象同名方法内可执行原有逻辑的同时,
			嵌入执行其他增强逻辑或其他对象的方法

	
	
	实现思路:	
		可以定义一个目标类作为提供需要被增强的方法
		将类注入IOC
		定义一个类实现BeanPostProcessor后处理器接口
		在after或者before方法中创建proxy对象进行动态代理
		代理逻辑:	先对bean进行具体判断避免所有bean都被代理
				创建代理对象(类加载器,代理接口,Handler方法)
				Handle方法参数(proxy:代理对象,method 被增强方法,args:方法参数)
				method可以调用invoke方法(bean:执行方法对象,args方法参数)
				在invoke方法前后加代码就可以了
				再将这个类注入IOC



AOP概念:
	目标对象:	target:		被增强方法对象
	代理对象:	Proxy:		对目标对象增强后的对象,客户端实际调用的对象
	连接点:		Joinpoint:	目标对象中可以被增强的方法
	切入点:		Pointcut:	目标对象中实际被增强的方法
	通知/增强:	Advice:		增强部分的代码逻辑
	切面:		Aspect:		增强和切入点的结合
	织入:		Weaving:	将通知和切入点动态组合的过程




