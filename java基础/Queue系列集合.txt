Queue系列集合:	Java中用来模拟队列这种数据结构的一组接口和类，它们都实现了Queue接口，
		表示一种先进先出（FIFO）的容器。

Queue接口提供了一些基本的方法来操作队列中的元素，比如插入、删除、检查等。


Queue接口有以下几个主要的子接口和实现类：

	Deque接口：	它是Queue接口的子接口，表示一个双端队列
			也就是说，它可以在两端进行插入和删除操作，
			既可以作为先进先出的队列，也可以作为后进先出的栈。


	BlockingQueue接口：它是Queue接口的子接口，表示一个阻塞队列
			也就是说，它支持在插入或删除元素时进行阻塞操作，实现多线程之间同步

	TransferQueue接口：它是BlockingQueue接口的子接口，表示一个传输队列
			也就是说，它支持在插入元素时等待另一个线程获取该元素，实现多线程之间交换

	PriorityQueue类：它是Queue接口的一个实现类，表示一个优先队列
			也就是说，它可以保证每次取出的元素都是队列中权值最小的或最大的

	ArrayDeque类：它是Deque接口的一个实现类，是基于数组实现的双端队列，
			它提供了快速的插入和删除操作。

	LinkedList类：它是Deque接口和List接口的一个实现类，是基于链表实现的双端队列和列表，
			它提供了灵活的插入和删除操作。

	ArrayBlockingQueue类：它是BlockingQueue接口的一个实现类，是基于数组实现的有界阻塞队列
			它提供了线程安全的插入和删除操作。

	LinkedBlockingQueue类：它是BlockingQueue接口的一个实现类，
			是基于链表实现的可选有界阻塞队列，提供了线程安全的插入和删除操作。

	LinkedBlockingDeque类：它是BlockingDeque接口和Deque接口的一个实现类，
			是基于链表实现的可选有界双端阻塞队列，提供了线程安全的两端插入和删除操作。

	LinkedTransferQueue类：它是TransferQueue接口和BlockingQueue接口的一个实现类
			是基于链表实现的无界传输队列，提供了线程安全的插入和删除操作，
			支持等待消费者模式。

	SynchronousQueue类：它是BlockingQueue接口的一个实现类，表示一个同步队列，
			也就是说，每个插入操作必须等待另一个线程执行相应的删除操作。

	PriorityBlockingQueue类：它是BlockingQueue接口和PriorityQueue类的一个扩展类，
			表示一个优先阻塞队列
		也就是说，在保证每次取出元素都是权值最小或最大的基础上，支持线程安全和阻塞操作。


	DelayQueue类：它是BlockingQueue接口的一个实现类，表示一个延迟队列
		也就是说，在保证每次取出元素都是权值最小或最大的基础上，
			要求元素只在其到期时才能从队列中取走。




其中最常用的有四个:
	ArrayDeque类：：	一个双端队列，可在两端进行插入和删除操作，
		既可以作为先进先出（FIFO）的队列，也可以作为后进先出（LIFO）的栈。
		基于数组实现，提供了快速的插入和删除操作。
		适用于实现一些简单的数据结构，如队列、栈、双端队列等


	LinkedList：	一个双端队列和列表，可在两端进行插入和删除操作，也可在中间插入和删除操作。		基于链表实现，提供了灵活的插入和删除操作
		适用于实现一些复杂的数据结构，比如链表、树、图等。

	PriorityQueue：	一个优先队列，可保证每次取出的元素都是队列中权值最小的或最大的。
		基于堆实现，提供了高效的插入和删除操作
		适用于实现一些需要排序或优先级的数据结构，比如堆、优先级队列、定时器等。

	ConcurrentLinkedQueue：	
		一个并发队列，支持多个线程同时对队列进行插入和删除操作，而不需要进行同步控制
		基于链表实现的，提供了高效的并发操作。
		适用于实现需要高并发或无锁的数据结构,比如无锁队列、无锁栈、无锁缓存等。

