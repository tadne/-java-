ConcurrentHashMap:	Java中的一个容器类，用来存储和操作键值对（key-value）据。
	
	ConcurrentHashMap特点:
		可在多线程的环境下高效存储和访问数据，不用使用额外的同步措施，如synchronized或Lock

	ConcurrentHashMap的内部实现:
		基于哈希表和分段锁的。
		哈希表是一种数组，每个数组元素叫做一个桶，每个桶可以存储一个或多个键值对 。
	
	
分段锁:	一种锁，将哈希表分为若干个段，每个段有一个独立的锁，在进行读写操作时，只需锁定相关的段，
	不需要锁定整个哈希表，从而提高了并发性能 。

ConcurrentHashMap的主要操作有以下几种：

	put(key, value)：	
		向ConcurrentHashMap添加一个键值对，如果key已存在，就覆盖原来的value。
步骤：
	根据key的哈希码值计算出它所属的段和桶的索引 。
	尝试获取该段的锁，如果成功，就进入下一步；
			如果失败，就自旋重试，直到成功为止 。

	在该桶中查找是否有相同的key，如果有，就替换原来的value，并返回旧的value；
				如果没有，就创建一个新的节点，并插入到该桶的链表中，并返回null 。
	释放该段的锁，并检查是否需要扩容哈希表 。


get(key)：
	从ConcurrentHashMap中获取一个key对应的value，如果key不存在，就返回null。
	不需要加锁，因为它只是读取数据，并不修改数据 。这个方法的步骤如下：

	根据key的哈希码值计算出它所属的段和桶的索引 。
	在该桶中查找是否有相同的key，如果有，就返回对应的value；如果没有，就返回null 。


remove(key)：
	从ConcurrentHashMap中删除一个key对应的键值对，返回被删的value，如果key不存在，返回null
	需要加锁，因为它要修改数据 。

步骤如下：
	根据key的哈希码值计算出它所属的段和桶的索引 。
	尝试获取该段的锁，如果成功，就进入下一步；如果失败，就自旋重试，直到成功为止 。
	在该桶中查找是否有相同的key，如果有，就删除该节点，返回被删的value；如果没有，就返回null
	释放该段的锁，检查是否需要缩容哈希表 。

除了这些基本操作外，ConcurrentHashMap还支持一些原子操作和批量操作 ，
		如putIfAbsent, replace, remove, forEach, reduce等。

这些操作可以保证在多线程的情况下，不会出现数据不一致或竞争条件的问题 。



















