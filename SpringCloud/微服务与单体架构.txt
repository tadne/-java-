单体架构（monolithic structure）：
			整个项目中所有功能模块在一个工程中开发；
			项目部署时要对所有模块一起编译、打包；项目的架构设计、开发模式非常简单。



	项目规模较小时，这种模式上手快，部署、运维也都很方便，因此早期很多小型项目都采用这种模式。


	随着项目的业务规模越来越大，团队开发人员也不断增加，单体架构就呈现出越来越多的问题：
		- 团队协作成本高：
			协作开发同一个项目，由于所有模块都在一个项目中，不同模块的代码之间物理边界越来越模糊。
			最终要把功能合并到一个分支，会陷入到解决冲突的泥潭之中。

		- 系统发布效率低：
			模块变更都需要发布整个系统，而系统发布过程中要多个模块之间制约较多，要对比各种文件，
			任何一处出现问题都会导致发布失败，往往一次发布需要数十分钟甚至数小时。

		- 系统可用性差：
			单体架构各个功能模块是作为一个服务部署，相互之间会互相影响，
			一些热点功能会耗尽系统资源，导致其它服务低可用。



微服务架构，
		首先是服务化，就是将单体架构中的功能模块从单体应用中拆分，独立部署为多个服务。

	同时要满足下面的一些特点：
		- 单一职责：一个微服务负责一部分业务功能，且其核心数据不依赖于其它模块。
		- 团队自治：每个微服务有自己独立的开发、测试、发布、运维，团队人员规模不超过10人
		- 服务自治：每个微服务都独立打包部署，访问独立数据库。且做好服务隔离，避免对其它服务产生影响

	

	微服务成功解决单体架构的问题，
		降低协作成本		服务分拆让每个服务的代码量减少
		提高发布效率		服务独立部署让代码变更时只要打包部署该服务即可
		提供系统可用性	服务隔离让服务器资源不会影响到其他服务


但微服务在拆分的过程中，还会面临很多其它问题。比如：
	- 如果出现跨服务的业务该如何处理？
	- 页面请求到底该访问哪个服务？
	- 如何实现各个服务之间的服务隔离？


					