Mybatis本身并没有提供分页的功能，只是提供了一些接口和参数来支持分页的操作。


要实现分页的功能，我们有以下几种常见的方法：

	用limit子句：	在SQL语句中使用limit子句来限制查询结果的数量和偏移量的方式，
			可以根据当前页码和每页显示的条数计算出limit子句的参数，并传入SQL语句。
		适用于MySQL、PostgreSQL等数据库，但不适用于Oracle、SQL Server等数据库。
		要使用这种方法，需要在XML配置文件或注解中编写带有limit子句的SQL语句，
		并用#或$来传入参数值。

如：   select * from user where name like concat('%', #{name}, '%') limit #{offset}, #{size}





	用RowBounds：	在Java代码中用RowBounds对象封装分页参数的方式，
		不需要修改SQL语句，通过RowBounds对象告诉Mybatis需要查询页和每页显示数据。
		适用于任何数据库，但它不是真正的物理分页，而是逻辑分页，
		即先查询出所有符合条件的数据，然后在内存中进行分页处理，可能会导致性能和内存问题。
		使用这种方法，要在Java代码中创建RowBounds对象，将其作为参数传入Mybatis查询方法





	使用分页插件：	利用Mybatis提供的插件机制来实现自动分页，不需要修改SQL语句和Java代码，
		通过配置文件或注解来指定分页参数，由插件拦截SQL语句并添加相应的分页逻辑
		适用于任何数据库，且是物理分页，即只查询出当前页需要显示的数据，提高性能和效率。

	使用这种方法，要引入相应的分页插件，并在配置文件或注解中配置相关的属性。

如：
	<!-- 引入PageHelper分页插件 -->
	<dependency>
    		<groupId>com.github.pagehelper</groupId>
    		<artifactId>pagehelper-spring-boot-starter</artifactId>
    		<version>1.3.1</version>
	</dependency>

	<!-- 配置yml-->
	# 指定数据库的方言
	pagehelper:
		helperDialect:  mysql
		# 指定是否支持RowBounds分页
		rowBoundsWithCount: true
		# 指定是否合理化分页参数，即当页码超出范围时，是否自动调整为第一页或最后一页
		reasonable: true

	<!-- 定义一个UserMapper.xml配置文件 -->
	<mapper namespace="cn.tewuyiang.mapper.UserMapper">
    	<!-- 直接查询, 不需要limit子句或RowBounds对象，由分页插件拦截SQL并添加分页逻辑 -->
    		<select id="selectUserByName" resultType="cn.tewuyiang.pojo.User">
        		select * from user where name like concat('%', #{name}, '%')
    		</select>
	</mapper>