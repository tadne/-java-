反射:	指在运行时动态地获取和操作类、对象、方法、属性等信息的能力 。


反射的作用有以下几点：

	实现动态加载和运行：
		反射可以在运行时加载和创建类的对象，而不需要在编译时就知道类的名称和结构。
		反射也可以在运行时调用和修改类的方法和属性，而不需要在编译时就确定调用的目标和参数。
		这样可以实现动态的功能扩展和修改 。

	实现泛型和注解：
		反射是Java泛型和注解的基础，可在运行时获取和操作泛型类型和注解信息，
			实现泛型擦除的补偿和注解的解析 。

	实现框架和工具：
		反射是很多框架和工具的核心技术，可实现对类的自动扫描、注册、注入、代理等功能，简化开发


	反射的原理:
		基于Java虚拟机（JVM）和类加载机制的。
		当JVM加载一个类时，会将类的字节码文件解析为一个Class对象，
		这个对象包含了类的所有信息，如类名、构造函数、方法、属性、父类、接口等 。
	

	通过反射API，可以获取这个Class对象，并通过它来访问和操作类的信息。


反射API主要包括以下几个类：

	Class类：
		反射的入口，代表一个类或接口，在内存中只有一份。

		可以通过三种方式获取Class对象：
			使用Class.forName("类名")方法；
			使用对象.getClass()方法；
			使用类名.class属性 。

	Constructor类：
		代表一个构造函数

		可通过Class对象的getConstructor()或getDeclaredConstructor()方法获取			Constructor对象，并通过它来创建类的实例 。

	Method类：
		代表一个方法，
		可通过Class对象的getMethod()或getDeclaredMethod()方法获取Method对象
		并通过它来调用或修改类的方法 。

	Field类：
		代表了一个属性，
		可通过Class对象的getField()或getDeclaredField()方法获取Field对象，
		并通过它来访问或修改类的属性 。













