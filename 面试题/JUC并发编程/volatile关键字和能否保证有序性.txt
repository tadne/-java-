volatile是Java中的一个同步机制，
	除了同步锁之外，可以用来保证共享变量的可见性、赋值操作的原子性和指令的有序性。


	可见性:
		一个线程修改了一个共享变量后，其他线程能够立即看到最新的值。
		
		如果没有volatile，那么由于CPU缓存和编译器优化等原因，
		其他线程可能读到过期的值，导致数据不一致。

	原子性:
		一个操作不可被中断，要么全部执行，要么都不执行。

		对于基本类型的变量，赋值操作本身就是原子的，但对于long和double类型的变量，
		如果没有volatile，那么赋值操作可能会被分成两个步骤，高32位和低32位，
		就可能导致线程安全问题。

			long类型和double类型占用8个字节。意味着long类型和double类型的变量在内存中的			表示需要两个连续的4字节的单元。
	
			当一个线程对一个long或double类型的变量进行赋值操作时，
			如果没有volatile修饰，那这个操作可能会被分成两个步骤：
			先写入高32位，再写入低32位，或先写入低32位，再写入高32位。
			这取决于JVM的实现和CPU的架构。


	有序性:
		程序按照代码的先后顺序执行。

		如果没有volatile，那么由于编译器和处理器的重排序优化等原因，
		代码的执行顺序可能会与源代码不一致，这样就可能导致逻辑错误。

	volatile关键字可以用来修饰一个变量，表示该变量是易变的，不允许线程内部缓存和重排序优化。
	这样可以保证线程对该变量的读写操作都是直接对内存进行的，从而实现可见性、原子性和有序性。