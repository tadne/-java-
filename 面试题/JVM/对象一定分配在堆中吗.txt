Java 对象的分配通常是在堆中进行的，堆是 Java 虚拟机管理的最大一块内存空间，存储对象实例和数组等数据。

	堆是被所有线程共享的，可分为新生代和老年代两个区域，采用不同的垃圾回收策略。

	堆的大小可以通过 -Xms 和 -Xmx 参数来设置，影响程序的性能和效率。

	但是，不是所有的 Java 对象都一定分配在堆中，
	
	有一种情况，对象可能会被分配在栈上，这就涉及到一种叫做逃逸分析（Escape Analysis）的技术。

	逃逸分析是一种判断对象是否被其他方法或线程引用的技术，
		如果一个对象只在方法内部使用，且不会被返回或者赋值给其他变量，
		那么这个对象就不会逃逸出方法的范围，也就不会被其他方法或线程访问。
		这样，这个对象就可以被分配在栈上，而不是堆上。

		其实就是方法内局部变量分配在栈上
	
	好处:	可以减少堆内存的占用，提高对象的分配和回收效率，避免垃圾回收的开销。
	
	逃逸分析技术是由即时编译器（JIT Compiler）来实现的，
	会在运行时对字节码进行优化，把那些不会逃逸的对象分配在栈上。
	如果想要开启逃逸分析技术，可以使用 -XX:+DoEscapeAnalysis 参数来指定。

