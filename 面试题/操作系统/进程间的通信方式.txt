进程间的通信方式有哪些?

	管道:	管道这种通信方式有两种限制, 
				一是半双工的通信 , 数据只能单向流程
				二是只能在有亲缘关系的进程间使用 (进程间的亲缘关系指:	父子进程关系)

			管道分为两类:
				匿名管道:		单向的,只能在亲缘关系的进程间通信
				命名管道:		以磁盘形式存在,可以实现本机任意进程间通信

	信号:	信号时一种比较复杂的通信方式,信号可以再任何时候发给任意进程,而无需知道该进程的状态
		Linux中常见信号:
			SIGHUP:		用户从终端注销,所有已启动进程都将收到该信号.
						系统缺省状态下对该信号处理是终止进程

			SIGINT:		程序终止信号.程序运行过程中,按ctrl+c将产生该信号

			SIGQUIT:		程序退出信号.程序运行过程中,按ctrl+\\将产生该信号
		
			SIGBUS和SIGSEGV:		进程访问非法地址

			SIGFPE:		运算中出现致命错误,如除零操作,数据溢出等

			SIGKILL:		用户终止进程执行信号.shell执行kill -9 发送该信号

			SIGTERM:	结束进程信号.shell执行kill 进程pid发送该信号

			SIGALRM:	定时器信号
		
			SIGCLD:		子进程退出信号.
						如果其父进程没有忽略该信号也没有处理该信号,则子进程退出后形成僵尸进程

	信号量:		信号量是一个计数器,可以用来控制多个进程对共享资源的访问
				常作为一种锁机制,防止某进程正在访问共享资源时,其他进程也访问该资源
				主要作为  进程间以及同一进程不同线程间的同步手段
	
	消息队列:		消息队列是消息的链接表 , 包括Posix消息队列和SystemV消息队列.
				有足够权限的进程可以向队列中添加消息,被赋予读权限的进程则可以读走队列中的消息
				消息队列克服了信号承载信息量少,管道只能承载无格式字节流以及缓冲区大小受限等缺点


	共享内存:		共享内存就是映射一段能被其他线程访问的内存,这段内存由一个进程创建,多个进程都可访问
				共享内存是最快的IPC方式,是针对其他进程间通信方式运行效率低专门设计的
		
				往往与其他进程通信机制,如信号量,配合使用,实现进程间的同步和通信
	
	Socket:		与其他通信机制不同的是,它可以用于不同机器间的进程通信


各个通信方式的优缺点:
	
	管道:		速度慢,容量有限
	Socket:		任何进程间都能通信,但是速度慢
	消息队列:		容量受系统限制,且要注意第一次读的时候,要考虑上一次没有读完数据的问题
	信号量:		不能传递复杂消息,只能用来同步
	共享内存区:	能很容易控制容量,速度快,但要保持同步
					比如:	一个进程写的时候,另一个进程要注意读写问题,相当于线程中的线程安全
							共享内存区也可以用作线程间通讯,
								但没必要.因为线程本来就共享了进程内的一块内存


概念:
	系统缺省状态:		在没有显示设置处理方式时,系统默认的处理方式

	僵尸进程:			UNIX中，进程结束, 但它的父进程没有等待(wait / waitpid)它，那它将变成僵尸进程。

		用ps命令观察进程的执行状态时，看到这些进程的状态栏为defunct。	
		僵尸进程是早已死亡的进程，但在进程表中仍占了一个位置。
			如果该进程的父进程已经结束，那么该进程就不会变成僵尸进程。
			因为每个进程结束时,系统会扫描当前系统运行的所有进程，看看有没有刚结束进程的子进程，	
			如果有，就由Init进程来接管他，成为它的父进程，从而保证每个进程都有一个父进程

	IPC:				两个或多个进程之间传输数据或信号的机制
		

问题:
	为什么共享内存是最快的IPC方式?
		因为它不需要数据拷贝，是直接将内存映射到各进程的虚拟地址空间的共享区. 
			避免了多余内存拷贝，所以效率最高、速度最快.
		但是，共享内存也存在一些缺点。
			如:	它不提供任何对共享内存访问的同步机制，要用其他IPC机制（如信号量）进行读写同步与互斥 
		






