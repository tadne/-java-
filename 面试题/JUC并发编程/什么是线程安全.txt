线程安全
	指在多线程环境下，程序可以始终执行正确的行为，符合预期的逻辑。


线程不安全的原因
	多个线程同时访问和修改了共享的数据，导致数据的不一致或者竞争条件。
	为了解决线程不安全的问题，需要使用一些同步机制来保证多个线程对共享数据的操作是互斥和有序的。

在Java中，有多种方法可以实现线程安全，比如：

用synchronized关键字：
	synchronized可以修饰方法或者代码块，让它们只能被一个线程执行，其他线程必须等待。

使用Lock接口：
	Lock是一种更灵活的锁机制，可以手动地获取和释放锁，并且支持中断和超时。

使用volatile关键字：
	volatile可以保证变量的可见性，即当一个线程修改了变量的值，其他线程能够立即看到修改后的值。

使用原子类：
	原子类是一种基于CAS（比较并交换）操作实现的类，可以保证对变量的操作是原子性的，即不可分割的。
