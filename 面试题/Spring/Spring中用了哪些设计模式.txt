设计模式		:解决软件开发中常见问题的经验总结，可以提高代码的可读性、可维护性和可扩展性。

Spring框架是一个轻量级的Java开发框架，广泛地应用了各种设计模式

如:

工厂模式：
	指通过一个工厂类或方法来创建和管理对象，而不是直接使用new操作符。

	作用:	解耦:	将对象的创建与代码分离，提供统一的接口来创建对象
		封装:	将对象的实例化过程封装在工厂类或方法中,隐藏了细节
		复用:	避免重复创建相同类型的对象，提高系统的性能和资源利用率
	
	
	Spring框架中使用工厂模式的地方有：
		BeanFactory和ApplicationContext：
		两个接口都是Spring IOC容器的核心组件，负责创建和管理所有的bean对象。

		BeanFactory是基础类型的IOC容器，提供了完整的IOC服务支持，
			但默认采用延迟初始化策略，只有当客户端对象需要访问容器中的某个受管对象时，
			才对该受管对象进行初始化和依赖注入操作。

		ApplicationContext是BeanFactory的子类，提供了更多的高级特性，
			如事件发布、国际化支持、注解支持等，
			默认采用预初始化策略，即在容器启动时就创建和注入所有的受管对象。

		FactoryBean：可以自定义一个工厂类或方法来创建和初始化bean对象，
			不是使用默认的构造函数或设值方法。
			实现了FactoryBean接口的bean是一类叫做factory的bean。
			特点:	spring会在使用getBean()调用获得该bean时，会自动调用该bean的
				getObject()方法，所以返回的不是factory这个bean，而是这个					bean.getObject()方法的返回值。

单例模式：
	指在整个应用中只存在一个共享的对象实例，所有对该对象的请求都会返回同一个实例。

	作用:	节省资源：避免多次创建相同功能对象，减少系统内存消耗和开销。
		保持一致：保证所有对该对象的操作都是针对同一个实例，保持数据和状态的一致性。
		控制访问：提供一个全局访问点来获取该对象实例，方便其他类或方法使用该对象。

	Spring框架中使用单例模式的地方有：
		单例作用域：Spring bean的默认作用域，
			表示在Spring容器中只存在一个共享的bean实例，所有对该bean的请求都
			返回同一个实例。适合无状态的bean，如服务层或数据访问层的组件 。
	
		单例注册表：Spring容器内部使用的一种数据结构，用来存储所有单例作用域的bean实例。
			使用ConcurrentHashMap来实现线程安全和高效访问 。

代理模式：
	指通过一个代理类或对象控制对目标类或对象的访问，

	作用:	在不修改目标类或对象代码的情况下，给目标类或对象添加一些额外的功能或逻辑。
	
	Spring框架中使用代理模式的地方有：
		Spring AOP：	Spring框架提供的一种面向切面编程（AOP）功能，
			可以让我们在不修改源代码的情况下，给程序动态地添加一些额外的功能，
			如日志、事务、权限等。
	
		Spring AOP基于动态代理，如果要代理对象实现了某个接口，那么Spring AOP
		会用JDK Proxy去创建代理对象，对于没有实现接口的对象，就无法使用JDK Proxy进行代理
		这时Spring AOP会用Cglib生成一个被代理对象的子类来作为代理 。

	RestTemplate：Spring框架提供的一种简化HTTP客户端操作的工具类，
		可以让我们方便地发送HTTP请求，并将响应转换为指定类型的对象。
		RestTemplate内部用了HttpClient或HttpURLConnection作为底层实现，
		但它对外提供了一个统一的接口，从而实现了对底层实现的代理 。





