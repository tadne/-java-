IO字节流	
	:	存储和读取数据的解决方案

	分类:		

			字节流		:操作所有文件
			字符流		:纯文本文件	底层用了缓冲区,效率高

字节流
	字节输出流:FileOutputStream
		创建字节输出流对象
			细节1:	参数是字符串表示的路径或File对象都可以
			细节2:	如果文件不存在会创建一个文件,但要求父路径存在
			细节3:	如果文件已经存在,则默认会清空文件	
			细节4:	如果想要追加写入,那么要在创建对象时,传入true	
			FileOutputStream fos=new FileOutputStream("Path",true);
		写数据
		void write(int a)			一次写一个字节数据
		void write(byte[] b)			一次写一个字节数组数据
		void  write(byte[]b,int off,int len)	一次写一个字节数组的部分数据

			细节:	write方法的参数是整数,实际上写到本地文件中是整数在ASCII上对应字符

		释放资源
			每次使用完流之后都要释放资源,不然会内存占用

		

		问题:	换行符
			windows:		\r\n
			Linux:			\n
			Mac:			\r
		细节:	win操作系统中,java对回车有优化,如果我们只写一个\r或者\n,java会自动补全
			

	字节输入流:
		创建字节输入流:
			细节1:	如果文件不存在,直接报错
		读取数据:
			细节1:	一次读一个字节,得到的数据时ASCII对应数字
			细节2:	读到文件末尾,read方法返回-1
		释放资源:
			每次使用完流之后都要释放资源,不然会内存占用


		
		byte[]变量代表了每次拷贝的数量,默认是1.byte数组的长度越大拷贝越快,最多1024

	
		IO异常处理,一个将释放资源的代码放到finally中
		可以通过实现AutoCloseable接口,就可以在特定的情况下,自动释放资源






字符流
	字符流底层就是字节流

	字符流=字节流+字符集

	
	特点:
		输入流:	一次读一个字节,遇到中文一次读多个字节
		输出流:	底层将数据按照指定编码方式进行编码,变成字节再写入文件中
	
	作用:	对纯文本文件读写

	
	Reader:	字符输入流接口
	Writer:	字符输出流接口

	
	字符输入流FIleReader:
		创建对象:
			FileReader(File file)  		创建字符输入流关联本地文件
			FileReader(String pathname)	创建字符输入流关联本地文件
			细节:	如果文件不存在,那么报错

		读取数据:int read()			读取数据,一次读一个,末尾返回-1
			int read(char[] buffer)		读取数据,一次读多个,末尾返回-1
		
		释放资源

	
	字符输入流原理解析:	(字节流底层没有缓冲区)
		创建对象	
			底层:	关联文件,创建缓冲区

		读取数据:
			判断缓冲区是否有数据读取
			缓冲区没有数据:	就从文件中获取,装到缓冲区,每次尽可能装满
					如果文件中没有数据,但会-1
			缓冲区有数据:	就从缓冲区获取
			空参read方法: 一次读一个字节,中文读多个,字节解码转为十进制返回
			带参read方法:读取字节,解码,强转,并将强转后的字符放在数组中

		
	字符输出流原理解析:
		创建对象
			底层:	关联文件,创建缓冲区
		
		读取数据:
			先将数据写到缓冲区中
			缓冲区装满了或者flush方法刷新了或者释放资源了,
			这三种情况下会将缓冲区数据写到文件中

			void flush()		将缓冲区数据刷新到本地文件中
			void close()		释放资源/关流
			
	字节流:		可以拷贝任意类型文件
	字符流:		读取和写出纯文本文件中数据
			
		



	

































