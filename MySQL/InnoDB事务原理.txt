redo Log:	重做日志,记录的是事务提交时,数据页的物理修改,用来实现事务的持久性
		分为两部分:	重做日志缓冲,即redolog Buffer 在内存中
				重做日志文件,即redolog File   在磁盘中
			当事务提交后会将所有修改信息存到该日志中,用于刷新脏页到磁盘
	
	作用:	实现事务持久性,在出现错误时,进行数据恢复

		

	没有redoLog流程:	客户端进行事务操作发请求到mysql服务器
			先搜索Buffer Pool缓冲池,若没有对应数据,后台线程就将数据从磁盘读取到缓冲池
			将crud操作应用到缓冲区,那片区域叫做脏页
			然后后台线程会按照时机将脏页中数据刷新到磁盘中
			
		问题:如果脏页刷新失败,会对数据库一致性造成影响


	有redoLog流程:	将crud操作应用到缓冲区,那片区域叫做脏页
			当对缓冲池中数据进行增删改后,先将增删改的数据记录在redolog Buffer中
			当事务提交时,就将redoLog Buffer刷新到磁盘中(ib_logfile文件)
			如果脏页刷新失败,就可以通过  redoLog 进行回滚

	redolog的清理:
			redolog是循环写入的,大小固定,写到末尾就会回到开头写,覆盖数据
	


undoLog:	回滚日志,用于记录数据被修改前的信息
		undoLog是逻辑日志,当删除一条记录时,undoLog会记录对应的insert记录,反之亦然.
		让执行回滚的时候,就可以从undoLog中的逻辑记录读取到相应的内容并回滚

	undoLog销毁:	事务执行时产生,事务提交时,不会马上删除undoLog,因为这些日志可以还用于MVC
	undoLog储存:	采用段的方式管理和记录,存在rollbacksegment回滚段中,内部包含1024个回滚段

	作用:	提供回滚和MVCC(多版本并发控制)

	undolog日志的清理:
		通过后台线程的purge操作实现,会根据事务状态和id判断是否清理
		只有当readview中不存在该事务id时才会被清理
		如果undolog过大,但是又无法被清理,就会抛出异常      The undo log of tablespace is full
		可以调整innodb_purge_batch_size参数来控制purge操作可以清理的最大记录数


持久性:		redoLog实现

	redoLog: 重做日志,记录数据页的物理修改,即增删改操作
		当客户端的请求到mysql,会先访问BufferPool缓冲池
		先在BufferPool中查找要修改的数据
		如果BufferPool中没有这些数据,会去磁盘中找到数据并读取到BufferPool
		找到数据后,先将增删改的数据记录在RedoLogBuffer中,再去操作BufferPool中的数据
		当事务提交时,就将RedologBuffer中的数据刷新到磁盘中的redolog file中
		如果之后脏页刷新失败,就通过ib_logfile0/1中内容进行回滚
		保证了事务的持久性

		注意:	RedoLogBuffer的数据时提交时就立刻刷新到磁盘的RedoLog日志中的
			但是缓冲池中数据要等待后台线程逐步刷新到磁盘中的redolog file中



	那么,为什么不在提交时就直接将Buffer Pool中的数据刷新到磁盘中???
		提高性能:
			bufferpool中的数据不是实时写入磁盘的，而是在内存中开辟了一个缓存区域，
			更新数据时优先更新到buffer pool，之后再由I/O线程写入磁盘。
			避免每次访问都进行磁盘I/O，提高访问速度。

		减少磁盘的随机写，提高磁盘的顺序写:
			redo log是物理日志，记录数据页的物理修改，而不是某行或某几行修改成什么样。
			redo log的大小是固定的，前面的内容会被覆盖，用循环写入的方式，
			可通过innodb_flush_log_at_trx_commit参数控制刷盘时机
			


原子性:		undolog实现
	undoLog: 回滚日志,记录数据被修改前的信息
	
	undoLog是逻辑日志,当删除一条记录时,undoLog会记录对应的insert记录,反之亦然.
	让执行回滚的时候,就可以从undoLog中的逻辑记录读取到相应的内容并回滚
		
	undoLog销毁:	事务执行时产生,事务提交时,不会马上删除undoLog,因为这些日志可以还用于MVC
	undoLog储存:	采用段的方式管理和记录,存在rollbacksegment回滚段中,内部包含1024个回滚段

	作用:	提供回滚和MVCC(多版本并发控制)

	这样原子性就实现了

	
	

















