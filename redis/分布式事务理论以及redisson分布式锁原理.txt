CAP理论:
	CAP:	Consistency  			一致性		:	用户拿到的数据永远是最新的
			Availability			可用性		:	任何时候查询都可以查到结果
			Partition tolenrance	分区容忍性	:	分布式架构在网络问题下依然对外提供服务
						网络问题:		请求中断,消息丢失等

	分布式系统一定要满足分区容忍性:		因为分开部署本身就会存在网络分区
	
	CAP理论就是说:	分布式系统不能同时满足一致性和可用性

	原因:	网关向各个分布式系统发消息,可能会因为网络问题等原因,先后收到消息
			此时,先收到消息的系统会修改数据
			而后收到消息的系统还没有修改数据
			这个时间是不能被消除的,导致了这个时间段不能满足一致性,除非让用户等待
			
BASE理论:	
	BASE:	Basically Available(基本可用),Soft state(软状态)和Ecentually consistent(最终一致性)
	
		基本可用:		当系统无法满足全部可用时保证核心服务可用即可.
				例:	外卖系统在中午12点并发很高,一定要保证下单流程涉及的服务可用
		软状态:		可以存在中间状态.
				例:	打印社保统计情况,不会立即出结果,而是提示打印中,但是保证最终状态正确即可
		最终一致性:	退款操作没有及时到账.经过一段时间到账.舍弃强一致性,满足最终一致性


分布式事务有哪些常用技术方案?
	实现CP就是实现强一致性:
			实现Seata框架基于AT模式实现
			使用Seata框架基于TCC模式实现
	实现AP要保证最终数据一致性:
			使用消息队列通知的方式实现,通知失败自动重试,达到最大失败次数就采用人工处理
			使用任务调度方案,启动任务调度将课程信息由数据库同步到es,minio,redis中
	

redisson分布式锁原理

获取锁:
	开始==>尝试获取锁==>判断ttl是否为null
		==>为null==>即获取锁成功==>判断leaseTime是否为-1
							==>是==>开启看门狗watchDog==>返回true
							==>不是==>返回true==>结束
		==>不为null==>判断剩余等待时间是否大于0
				==>是==>订阅并等待释放锁的信号
						==>判断等待时间是否超时
							==>是==>返回false==>结束
							==>不是==>尝试获取锁
				==不是==>	返回false==>结束	
	
	注	:		看门狗是用来延长过期时间的,来避免出现
					线程执行时间过长导致锁过期的情况
					线程宕机或断网会停止延长有效期
					
释放锁
	开始==>尝试释放锁==>判断是否成功
			==>否==>记录异常==>结束
			==>是==>发送释放消息==>取消看门狗watchDog==>结束


		
	总结:	redisson是如何解决分布式问题的?

		可重入:	利用hash机构记录线程id和重入次数
		可重试:	利用信号量和PubSub功能实现等待,唤醒,获取锁失败的重试机制
		超时续约:	利用看门狗watchDog,每隔一段时间(releaseTime/3),重置超时时间	



主从一致性:
		Redis提供了主从集群,其中主节点处理写操作,从节点处理读操作,实现读写分离提供并发吞吐

		但是主从要做数据同步,数据同步有延时

		如果在获取锁时,数据同步没有完成,并且主节点宕机了,这时redis会让从节点变成节点恢复业务

		但是主节点中的锁就丢失了,导致锁失效


	解决:	redisson在获取锁时,会对所有节点发请求获取锁,放弃读写分类
			但是要拿到每一个实例的锁才行,效率比较慢

















	


	
