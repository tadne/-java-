.服务拆分原则
	服务拆分一定要考虑几个问题：
		- 什么时候拆？
		- 如何拆？


	什么时候拆
		一般情况下，一个初创的项目，首先要验证项目的可行性。
			这一阶段的首要任务是敏捷开发，快速产出生产可用的产品，投入市场做验证。为达成目的，
			项目架构会比较简单，很多情况下直接采用单体架构，开发成本比较低，快速产出结果，
			一旦发现项目不符合市场，损失较小。

			大多数小型项目来说，一般是先采用单体架构，随着用户规模扩大、业务复杂后再拆分为微服务架构。			初期成本会比较低，可以快速试错。但问题就在于后期做服务拆分时，会遇到很多代码耦合问题，
			拆分困难（前易后难）。

			大型项目，立项之初目的就很明确，为了长远考虑，架构设计时就直接选择微服务架构。
			前期投入较多，但后期不用拆分服务（前难后易）。

	怎么拆
		微服务拆分时粒度要小，是拆分的目标。具体从两个角度来分析：
		- 高内聚：每个微服务的职责要尽量单一，包含的业务相互关联度高、完整度高。
		- 低耦合：每个微服务的功能要相对独立，尽量减少对其它微服务的依赖，或者依赖接口的稳定性要强。

		高内聚:	单一职责，但不能说一个微服务就一个接口，是要保证微服务内部业务的完整性为前提。
				目标是当我们要修改某个业务时，最好就只修改当前微服务，这样变更的成本低。
				微服务做到高内聚，那服务间的耦合度自然就降低。

				微服务间不可避免的有业务交互，如下单时需要查询商品数据。不能在订单服务
				直接查询商品数据库，否则就导致了数据耦合。应该由商品服务对应暴露接口，
				并保证微服务对外接口的稳定性（即：尽量保证接口外观不变）。
		
				出现了服务间调用，但在商品服务做内部修改，不会影响到订单微服务，服务间的耦合度降低。

	拆分方式:一般有两种方式：
		- 纵向拆分		
			就是按照项目的功能模块拆分。如hmall中，有用户管理、订单管理、购物车、商品管理、支付等。			按照功能模块拆分，就属于纵向拆分。这种模式可以尽可能提高服务的内聚性。

		- 横向拆分
			看各功能模块间有没有公共业务部分，有就将其抽取出来作为通用服务。
			如用户登录要发送消息通知，记录风控数据，下单时要发送短信，记录风控数据。
				因此消息发送、风控数据记录就是通用的业务功能，可抽取为公共服务：消息中心、风控管理。			提高业务的复用性，避免重复开发。同时通用业务一般接口稳定性较强，不会使服务间过分耦合。


	微服务项目一般有两种不同的工程结构：
		- 完全解耦： 每个微服务创建为独立的工程，可以使用不同的开发语言来开发，项目完全解耦。
  				- 优点：服务之间耦合度低
  				- 缺点：每个项目有独立仓库，管理麻烦

		- Maven聚合：整个项目为一个Project，每个微服务是其中的一个Module
  				- 优点：项目代码集中，管理和运维方便
  				- 缺点：服务间耦合，编译时间长


	服务拆分后，会出现跨微服务业务，此时就要进行远程调用。微服务间远程调用称为RPC，即远程过程调用		RPC的实现方式有很多，比如：
			- 基于Http协议
			- 基于Dubbo协议
		一般使用的Http方式，不关心服务提供者的具体技术实现，只对外暴露Http接口，更符合微服务的需要。


	Java发送http请求可以使用Spring提供的RestTemplate，使用的基本步骤如下：	
		- 注册RestTemplate到Spring容器
		- 调用RestTemplate的API发送请求，常见方法有：
			  - getForObject：		发送Get请求并返回指定类型对象
			  - PostForObject：	发送Post请求并返回指定类型对象
			  - put：				发送PUT请求
			  - delete：			发送Delete请求
			  - exchange：		发送任意类型请求，返回ResponseEntity

	