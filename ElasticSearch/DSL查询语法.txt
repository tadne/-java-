ES是基于JSON的DSL(Domain Specific Language)来定义查询



常见的查询类型包括:

	查询所有:			查询所有数据 , 一般测试使用 , 如: match_all

			查询的基本语法:
			GET /indexName/_search{
				"query":{
					"查询类型":{
						"查询条件":"条件值"
					}
				}
			}

	全文检索查询:		利用分词器对用户输入内存分词,再去倒排索引库中匹配
					如:	match_query		multi_match_query
			
		match查询:	全文检索产线的一种,会对用户输入内容分词,再通过倒排索引库检索
			查询语法:
			GET /indexName/_search
			{
			  	"query": {
					"match": {
					     	"all": "TEXT"
					} 
				}
			 }

		multi_match:	与match查询类似,只不过支持同时多个字段查询
			查询语法:
			GET /indexName/_search
			{
			  	"query": {
					"multi_match": {
					     	"query": "TEXT",
						"fields":["FIELD1","FIELD2",...]
					} 
				}
			 }
			
		区别:	match是根据一个字段查询,multi_match是根据多个字段查询
				参与查询的字段越多,查询性能越差



	精确查询:			根据精确词条值查找数据,一般是查找keyword, 数值 , 日期 , boolean等类型字段
					如:	ids , range , term

		term查询:	根据词条精确值查询	如:	城市查询
			GET /indexName/_search
			{
				"query": {
					"term": {
				 		"Field":{
							"value": "TEXT"
						}
					} 
				}
			}


		range查询:	根据值的范围查询		如:   商品价格
			GET /indexName/_search
			{
				"query": {
					"range": {
				 		"gte": 1000,
						"lte": 2000
					} 
				}
			}
			# gte : 大于等于   lte: 小于等于  gt:  大于  lt: 小于
	
	地理查询:			根据经纬度查询.
					如:	geo_bounbing_box	geo_distence		
	
			geo_bounbing_box查询,:	查询geo_point落在某个矩形范围的所有文档
				//不常用

			geo_distence	查询:	查询到指定中心点小于某个距离值的所有文档

					GET /indexName/_search
					{
						"query": {
							"geo_distance": {
								"distance":"2km",
								"location": "31.21,121.5"
							} 
						}
					}



	复合查询:			复合查询可以将上述各种查询条件组合起来, 合并查询条件
					如:	bool	function_score

			分值计算:
					TF算法		TF(词条频率)=词条出现次数/文档中词条总数
								

					TF-IDF算法
							IDF(逆文档频率)=Log(文档总数/包含词条的文档总数)
							score = (词条频率的总和)*IDF(逆文档频率)

							在ES5.0前使用,会随着词频增加而增大

					BM25算法
							在ES5.0之后使用,会随着词频的增大而增大,但是增大曲线趋于水平



			function score查询:	算分函数查询,可以控制文档相关性算分,控制文档排名,如: 百度竞价
								就是可以修改原始排名算法,控制排名顺序
	
				GET /indexName/_search
				{
				  "query": {
				    	"function_score": {
					 	"query": {"match": {"FIELD":"TEXT"}},			//原始查询条件
      						"functions": [							
        						{
								"filter": {"term": {	"FIELD": "VALUE"}}, //过滤条件,符合条件才重新算分
								"weight": 10			//算分函数
							}
						],
						"boost_mode": "multiply"  //加权模式
						}
					}
				}

				注意:	JSON中不允许有注释,以上注释只是为方便记忆
		
				常见算分函数:
					"weight":			给一个常量,作为函数结果
					"field_value_factor":	用文档的某个字段值作为函数结果
					"random_score":		随机生成一个值
					"script_score":		自定义计算公式


				加权模式:	
					"multiply":	两者相乘(默认)
					"replace":	用function_score代替query_score
					sum , avg , max , min....


			Boolean查询:		布尔查询时一个或多个查询子句的组合.子查询方式:
				must:		必须匹配每个子查询"与"
				should:		选择性匹配,类似"或"
				must_not	必须不匹配,不参与算分
				filter:		必须匹配,不参与算分

				其中不参与算分性能更好,尽量减少参与算分字段

		GET /indexName/_search
		{
			"query": {
				"bool": {
					"must": [{"match": {"name": "啦啦啦"}}],
					"must_not": [{"range": {"price": {"gt": 400}}}],
					"filter": [{"geo_distance": {"distance": "10km","location": {"lat": 31.21,"lon": 121.5}}}]
				}
			}
		}






如何写一个function_score查询?
	考虑哪些文档要算分加权?
	考虑算分函数是什么?
	考虑加权模式是什么?



	






