依赖注入（Dependency Injection，DI）
	实现控制反转的技术，
	可以让程序组件之间的依赖关系由容器来管理，而不是硬编码在程序中。


依赖注入的常见实现方式有三种：

	属性注入：	在类中定义属性，并使用注解或XML配置来指定属性的值或引用其他的bean。
			这种方式简单易用，但是可能导致属性被过度暴露。

	Setter注入：	在类中定义setter方法，并使用注解或XML配置来调用setter方法来注入依赖的bean。
			这种方式可以实现延迟注入，
				也就是只有在需要使用依赖的bean时才会调用setter方法。
				但是这种方式也可能导致属性被过度暴露，要编写额外的setter方法。

	构造器注入：	在类中定义有参数的构造器，并使用注解或XML配置来调用构造器来注入依赖的bean。
			这种方式可以实现强制注入，
				也就是保证类的实例化必须提供依赖的bean。
				但是这种方式也可能导致构造器参数过多，而且不适合循环依赖的情况。