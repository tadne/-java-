Mybatis的封装过程主要分为以下几个步骤：

	调用Mybatis的查询方法时，传入一个SQL语句和一个参数对象，
		Mybatis会根据SQL语句和参数对象生成一个PreparedStatement对象，
		并执行对象的executeQuery()方法，得到ResultSet对象，即数据库返回的查询结果集。

	Mybatis会根据查询方法的返回值类型来判断我们需要返回的目标对象类型，

		如果基本类型或包装类型或字符串类型，就直接从ResultSet中获取第一行第一列的值并返回；

		如果是集合类型或数组类型，就创建空的集合或数组，并循环遍历ResultSet中的每一行数据，
		将每一行数据转换为对应的元素对象，并添加到集合或数组中，并返回；
	
		如果是自定义类型或Map类型，就创建空的对象或Map，并循环遍历ResultSet中的每一列数据
		将每一列数据转换为对应的属性值或键值对，并赋值给对象或Map，并返回。

	Mybatis会根据我们在XML配置文件或注解中定义的映射规则来转换ResultSet中的每一列数据，
		如果没有定义映射规则，就使用默认的映射规则。
	
		默认的映射规则是：如果目标对象是自定义类型，使用数据库表字段名作为Java对象属性名；
			如果目标对象是Map类型，就使用数据库表的字段名作为Map的键名。
		
		如果要自定义映射规则，可用resultMap、别名、注解等方式指定每一列数据和
			目标对象间的对应关系



Mybatis提供了以下几种常见的映射方式：

	resultMap：	在XML配置文件中定义Java对象和数据库表之间的映射关系的方式，
			可以自由指定每个属性和字段之间的对应关系，不需要遵循任何命名规则。

			使用这种方式，要在XML配置文件中用<resultMap>标签定义一个resultMap，
			并使用<result>标签指定属性和字段之间的对应关系，
			然后在<select>、<insert>、<update>或<delete>标签中用resultMap属性
			来引用该resultMap 。

	别名：		在SQL语句中给数据库表的字段名起一个别名的方式，可以简化SQL语句的编写，
			并让别名与Java对象的属性名保持一致，实现自动映射。
			
			使用这种方式，要在SQL语句中使用as关键字来给每个字段名起一个别名，
			并让别名与Java对象的属性名相同 。

	注解：		在Java对象或方法上添加注解的方式，可以省略XML配置文件，
			直接在注解中指定Java对象和数据库表之间的映射关系。
	
			使用这种方式，要在Java对象或方法上添加相应的注解，
			并在注解中指定每个属性或参数与字段之间的对应关系 。







