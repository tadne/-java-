不断创建和销毁线程非常销毁性能,浪费资源

线程池
	
	作用:
		提交任务时,线程池会创建新线程对象,任务执行完,线程会归还给线程池,下次提交任务,不会再创建线程
		而是复用已有线程,提交任务时,线程池没有空闲线程,也无法创建新线程,任务就会排队


代码实现
	创建线程池
		FixedThreadPool：
				包含固定数量的线程，
				任务提交时:	有空闲线程则立即执行，否则该任务会暂存到队列等待。
				线程数固定的，不存在线程数量过多导致系统资源耗尽的问题

		CachedThreadPool：
				不包含固定数量的线程，
				任务提交时:	有空闲线程则立即执行，否则会创建新的线程执行任务。
				线程数不固定，可以根据需要创建大量的线程来处理任务。

		SingleThreadExecutor：
				只包含一个线程
				所有任务都在该线程中串行执行
				只有一个线程执行任务，不存在多线程之间的竞争问题。

		ScheduledThreadPool：
				只包含一个线程
				所有任务都在该线程中串行执行
				可用来执行定时任务和周期性任务。可以指定延迟时间和周期时间来执行任务。

		WorkStealingPool：
				Java 8中新增加线程池实现。使用工作窃取算法来提高并行度。
					在工作窃取算法中，每个线程都维护一个双端队列，
					某线程完成自己队列中的所有任务后，会从其他线程的队列中窃取一些任务执行

	线程池中线程方法
		Future<?> submit(Runnable task)：		提交任务
		void shutdown()：					关闭线程池


自定义线程池
	ThreadPoolExector()
	自定义线程池的构造方法,七个参数解释
	corePoolSize：   		核心线程的最大值，不能小于0
	maximumPoolSize：	最大线程数，>= 核心线程最大值，maximumPoolSize>= corePoolSize
	keepAliveTime：  		空闲线程最大存活时间,不能小于0
	unit：           			时间单位
	workQueue：      		任务队列，不能为null
	threadFactory：  		创建线程工厂,不能为null      
			(常用)Executors.defaultThreadFactory()	
			底层就是new个Thread,然后在方法体力加设置

	handler：        		任务的拒绝策略,不能为null    	
		任务的拒绝策略(ThreadPoolExector中的静态内部类)
			AbortPolicy			丢弃任务并抛出RejectedExecution异常
			DiscardPolicy			丢弃任务但是不抛出异常
			DiscardOldestPolicy	抛弃队列中等待最久的任务,把当前任务加入队列
			CallerRunsPolicy		调用任务的run()方法绕过线程池直接执行




	判断线程池大小多少合适?
		cpu密集运算的项目:	最大并行数+1
		IO密集型运算的项目:	
			最大并行数*期望cpu利用率*总时间(cpu计算时间+等待时间)/cpu计算时间
		

		最大并行数:		java虚拟机可用的处理器数目,其实就是电脑的线程数,
						如四核八线程,那最大并行数就是8
					
			代码获取方式:	int i = Runtime.getRuntime().availableProcessors();
			
		

