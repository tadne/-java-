前后端联调的时候出现了一些问题：
	- 请求不同数据时要访问不同的入口，要维护多个入口地址，麻烦
	- 前端无法调用nacos，无法实时更新服务列表


单体架构时只需要完成一次用户登录、身份校验，就可以在业务中获取到用户信息。

微服务拆分后，每个微服务都独立部署，这就存在一些问题：
	- 每个微服务都要编写登录校验、用户信息获取的功能？
	- 当微服务之间调用时，如何传递用户信息？

网关路由

	什么是网关？
		网关是网络的关口。
			数据在网络间传输，从一个网络传输到另一网络时要经过网关做数据路由和转发以及数据安全校验。

		前端请求不能直接访问微服务，而是要请求网关：
			- 网关可以做安全控制，也就是登录身份校验，校验通过才放行
			- 通过认证后，网关再根据请求判断应该访问哪个微服务，将请求转发过去


		SpringCloud，提供了两种网关实现方案：
				- Netflix Zuul：早期实现，目前已经淘汰
				- SpringCloudGateway：基于Spring的WebFlux技术，支持响应式编程，吞吐能力更强


	使用:	创建网关module作为微服务
			导入依赖 :   	
				网关		spring-cloud-starter-gateway
				
			配置路由:
				spring:
  				  cloud:
    		 		    gateway:
      				       routes:
        				 - id: item # 路由规则id，自定义，唯一
         				    uri: lb://serviceName # 路由的目标服务，lb代表负载均衡，从注册中心拉取服务列表
          				    predicates: # 路由断言，判断当前请求是否符合当前规则，符合则路由到目标服务
            					- Path=/user/**,/auth/** # 这里是以请求路径作为判断规则
        			          - id: cart
          			             uri: lb://serviceName1
          			             predicates:
            			                - Path=/seach/**
					# 将要管理的服务加入里面即可
        
		routes对应的是一个集合List<RouteDefinition>，可以定义很多路由规则。

			- id：		路由的唯一标示
			- predicates：路由断言，其实就是匹配条件
			- filters：	路由过滤条件，后面讲
			- uri：		路由目标地址，lb://代表负载均衡，从注册中心拉取服务列表

	
			
		重点关注		predicates

			After : 		是某个时间点后的请求  		- After=2037-01-20T17:42:47.789-07:00
			Before: 		是某个时间点之前的请求  	- Before=2031-04-13T15:14:47.433+08:00
			Between : 	是某两个时间点之间的请求  	- Between=
			Cookie : 		请求必须包含某些cookie | 	- Cookie=chocolate, ch.p |
			Header :		请求必须包含某些header 	- Header=X-Request-Id, \d+ |
			Host :		请求必须访问某个host域名 	- Host=**.somehost.org,**.anotherhost.org 
			Method:		请求方式必须是指定方式 | 	- Method=GET,POST 
			Path:		请求路径必须符合指定规则 	- Path=/red/{segment},/blue/** 
			Query:		请求参数必须包含指定参数  	- Query=name, Jack或者- Query=name 
			RemoteAddr: 请求者的ip必须是指定范围  	- RemoteAddr=192.168.1.1/24 
			weight:		权重处理 |  |








		