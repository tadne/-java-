抽象类

	抽象方法：	将共性行为抽取到父类后，由于每一个子类的执行的内容是不一样的
			所以，在父类中不能确定具体的方法体的时候，就可以定义为抽象方法
	
	抽象类：		如果一个类中存在抽象方法，那么给类就必须声明为抽象类
	
	格式：	public abstract 返回值类型 方法名（参数列表）；
		public abstract class 类名{}；

	

	注意事项：	抽象类不能被实例化
				抽象类中不一定有抽象方法
				有抽象方法的类一定是抽象类
				抽象类的子类：	要么重写抽象类中的所有抽象方法
								要么是抽象类


	
	意义
		把一些具有相同属性和方法的组件进行抽象，这样更有利于代码和程序的维护。
		当又有一个具有相似的组件产生时，只需要继承该抽象类就可以获得该抽象类的那些属性和方法。
		

接口和抽象类的区别:
		接口只能定义抽象方法和常量，而抽象类可以定义抽象方法、常量、变量和非抽象方法。
		一个类只能继承一个抽象类，但是可以实现多个接口。
			如果需要在多个类之间共享代码，则应该使用接口。
			如果需要在子类中重用父类的代码并添加新的代码，则应该使用继承抽象类。
			如果需要同时使用这两种功能，则可以使用抽象类来实现接口。
	
什么时候使用抽象类?

	在需要更强的规则的时候, 接口只能强制重写方法标签,但抽象类还可以要求强制重写方法体
	或者想要继承一些方法的时候,可以使用抽象类
	



