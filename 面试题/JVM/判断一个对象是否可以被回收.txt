Java 对象的回收是由 JVM 的垃圾回收器（GC）来负责，会定期检查堆内存中的对象，找出那些不再被引用的对象，并释放它们占用的空间。

但是，如何判断一个对象是否不再被引用呢？这就需要用到一些判定算法，常见的有以下几种：

	引用计数法：	给每个对象添加一个引用计数器，当有一个地方引用它时，计数器值加一；
			当有一个引用失效时，计数器值减一；
			任何时刻计数器为零的对象就是不可能再被使用的。
			这种方法实现简单，效率高，但是无法解决对象之间相互循环引用的问题。

	可达性分析法：	从 GC Roots根对象作为起始点，向下搜索，搜索所走过的路径称为引用链。
			当一个对象到GCRoots没有任何引用链相连时，证明此对象是不可用的。
			这种方法可以解决循环引用的问题，但要暂停用户线程，影响程序的执行效率。



	弱引用法：	用一种特殊的引用类型，称为弱引用，来指向堆中的对象。
		弱引用的特点:	当垃圾回收器发现了弱引用,会直接回收它所指向的对象。
				可以让程序员灵活地控制对象的回收时机，但增加了编程的复杂度。