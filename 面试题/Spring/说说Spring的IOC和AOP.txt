IoC，英文全称Inversion of Control，意为控制反转。

	是一种设计原则，目的是降低程序组件之间的耦合度，提高程序的可扩展性和可维护性。

	控制反转核心思想:不由程序员创建和管理对象，而是由Spring的IoC容器来实例化、配置和组装对象。
		这样，对象之间的依赖关系就由容器来管理，而不是硬编码在程序中。
		Spring提供了多种方式来实现控制反转，例如基于注解、基于XML、基于Java配置等。

AOP，英文全称Aspect-Oriented Programming，意为面向切面编程
	是一种编程范式，目的是实现横切关注点的模块化。
		
	横切关注点:分散在多个模块中，但不属于任何一个模块核心功能的逻辑，如日志、事务、安全等。

	面向切面编程核心思想:	
		把这些横切关注点封装成独立的模块（切面），
		在运行时动态地将这些切面插入到目标对象（被代理对象）的执行流程中。

		可以实现对目标对象功能的增强或修改，而不影响其核心逻辑。
		Spring提供了基于Schema和基于@AspectJ两种方式来实现面向切面编程。