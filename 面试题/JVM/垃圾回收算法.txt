垃圾回收算法:	 JVM 用来回收堆内存中不再被引用的对象的一种方法，
		可以有效地防止内存泄漏和内存溢出，提高程序的性能和稳定性。


常见的垃圾回收算法有以下几种：

	标记-清除算法（Mark-Sweep）：
		最基本的垃圾回收算法，分为两个步骤：标记和清除。
		标记阶段，从 GC Roots 开始遍历所有可达的对象，并标记它们为存活；
		清除阶段，遍历堆内存中的所有对象，把没有被标记的对象（即不可达的对象）清理掉。

		这种算法的优点是实现简单，不需要额外的空间；
		缺点是效率低，会产生内存碎片。

	复制算法（Copying）：
		针对新生代的垃圾回收算法，把新生代分为两个大小相等的区域：From 和 To。
		每次只使用其中一个区域，当该区域被分配满时，就触发一次 Minor GC。
		Minor GC 会把 From 区域中仍然存活的对象复制到 To 区域中，并清空 From 区域。
		然后交换 From 和 To 的角色，继续下一轮分配和回收。
	
		优点是效率高，不会产生内存碎片；
		缺点是浪费空间，需要两倍的内存空间。

	标记-整理算法（Mark-Compact）：
		针对老年代的垃圾回收算法，分为两个步骤：标记和整理。
		标记阶段，从 GC Roots 开始遍历所有可达的对象，并标记它们为存活；
		整理阶段，把所有存活对象向内存空间一端移动，并更新它们的引用地址和清理边界外的内存。
		
		优点是不会浪费空间，不会产生内存碎片；
		缺点是效率低，需要移动对象和更新引用。

	分代收集算法（Generational Collection）：
		综合了复制算法和标记-整理算法的垃圾回收算法，
		根据对象的生命周期将堆内存划分为新生代和老年代两个区域，分别采用不同的回收策略。
		新生代中的对象存活时间较短，所以采用复制算法进行高效地回收；
		老年代中的对象存活时间较长，所以采用标记-整理算法进行节省空间地回收。
	
		优点是充分利用了各个区域的特点，提高了垃圾回收的效率和效果；
		缺点是需要维护对象之间的跨代引用。