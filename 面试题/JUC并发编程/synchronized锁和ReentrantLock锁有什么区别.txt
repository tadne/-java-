synchronized锁和ReentrantLock锁的区别主要有以下几点：

底层实现不同：
	synchronized是JVM层面的锁，是Java关键字，通过monitor对象完成，
	ReentrantLock是从jdk1.5以来提供的API层面的锁，基于CAS和volatile实现。

释放锁的方式不同：
	synchronized是自动释放锁的，当代码执行完或者遇到异常时，会自动释放锁
	ReentrantLock需要手动调用lock()和unlock()方法来加锁和释放锁，否则可能导致死锁。

是否可中断：
	synchronized是不可中断的锁，除非出现异常或者正常执行完成，否则无法中断
	ReentrantLock可以通过tryLock(long timeout, TimeUnit unit)
		或lockInterruptibly()方法来设置超时或者响应中断。

是否公平锁：
	synchronized是非公平锁，即无法保证等待的线程按照先后顺序获取锁，
	ReentrantLock可以通过构造函数传入boolean值选择是否为公平锁，true为公平锁，false为非公平锁

是否可绑定条件：
	synchronized不能绑定条件，只能通过Object类的wait()和notify()方法实现线程间的通信，
	ReentrantLock可以通过newCondition()方法创建Condition对象，
		并通过await()和signal()方法来实现线程间的精确唤醒。




公平锁:
	一种锁，保证了多个线程按照申请锁顺序来获取锁，
	也就是说,先申请的线程先获得锁，后申请的线程后获得锁。
	这样可以避免某些线程长时间等待锁而导致的饥饿现象。
	公平锁的一个例子是ReentrantLock，可以通过构造函数传入一个boolean值来选择是否为公平锁。

非公平锁:
	一种锁，不保证多个线程按照申请锁的顺序来获取锁，
	也就是说,可能后申请的线程先获得锁，而先申请的线程后获得锁。
	这样可以提高一些性能和吞吐量，因为不需要维护一个等待队列。
	非公平锁的一个例子是synchronized，它是Java关键字，用来实现同步代码块或方法3。

公平锁和非公平锁的区别
	主要在于是否考虑等待队列中的线程的顺序，以及是否允许后来的线程插队。
	公平锁更加公正，但是效率较低；非公平锁效率较高，但是可能导致某些线程饥饿。








