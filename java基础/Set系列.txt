Set系列的集合		Set集合的底层就是Map集合
	无序,不重复,无索引

	实现类:	HashSet			无序,不重复,无索引	HashMap
		LinkedHashSet		有序,不重复,无索引	LinkedHashMap
		TreeSet			可排序,不重复,无索引	TreeMap


	常用方法:	boolean add(E e)		添加元素
			void clear()			清空所有元素
			boolean remove(E e)		把给定对象在当前集合中删除
			boolean contains(Object o)	判断当前集合中是否包含给定对象
				如果是引用数据类型,那要重写equals和hash方法
			boolean isEmpty()		判断当前集合是否为空
			int size()			返回当前集合中元素的个数

	遍历方式:	迭代器,增强for,lambda
	


	HashSet:	底层是Hash表储存数据
			哈希表示一种对于增删改查都性能比较好的结构
		
	    哈希表:		
		jdk8前:	数组+链表
		jdk8后: 数组+链表+红黑树
	
		创建一个默认长为16的数组,加载因子为0.75,数组名为table
		根据元素的哈希值与数组的长度计算出应该存入的位置
		int index=(数组长度-1) & 哈希值	
		判断当前位置是否是null,null就存入
	   	如果不为null,那就调用equals比较对象内部属性值,
			一样不存,不一样,存入数组形成链表
	   jdk8之前:	新元素存入数组,老元素挂在新元素下,形成链表
	   jdk8之后:	新元素直接挂在老元素下面,形成链表
			当链表的长度>8,数组长度>=64的时候,链表就会变成红黑树
			

		哈希值:	对象的整数表现形式,方法定义在object类,所有对象都可以调用,
			默认用地址值进行计算,一般会重写hashCode方法
		特点:	没有重写的hashCode方法,不同对象哈希值不同
			重写的方法,不同对象属性相同,哈希值相同
			在小概率情况下,不同属性的对象或地址值计算的hash值一样(哈希碰撞)
						
			
	LinkedHashSet:		有序,不重复,无索引	继承HashSet
		
		底层:	哈希表,双链表
		保证储存和取出的顺序一致,每一个元素额外的多了一个双链表的机制记录储蓄的顺序
	
		如果数据去重,用HashSet
		去重加有序,用LinkedHashSet
		

	TreeSet:		可排序,不重复,无索引
		底层:	红黑树

	     默认排序:		数值类型,默认排序从小到大
				字符串就是按照字符在ASCII表中升序排序
				对象类型比较,实现Comparable接口,重写方法,指定比较规则,存红黑树
				返回负数存左边,正数存右边,0不存

	     比较器排序:		在创建TreeSet对象的时候传入参数,比较器Comparator接口
				因为是函数式接口,可以用lambda简化
				
		
		如果两种排序都存在,那么会以比较器排序为准


集合使用场景:		
		可重复			用ArrayList,基于数组
		可重复且增删多于查询	用LinkedList,基于链表
		去重			用HashSet,基于哈希表,双链表,红黑树
		去重且保证存储顺序	用LinkedHashSet,基于哈希表,双链表,效率低于HashSet
		排序			用TreeSet,基于红黑树,也可以用List排序
		



