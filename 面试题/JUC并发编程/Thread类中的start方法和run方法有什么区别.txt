Thread类是Java中用来表示一个线程的类，它有两个重要的方法：start方法和run方法。



这两个方法的区别在于：

start方法
	用来启动一个新的线程，会调用JVM的本地方法来创建一个线程，并让该线程执行run方法中的代码。

	start方法只能被调用一次，否则会抛出IllegalThreadStateException异常。
		因为:	start方法指定了某一个线程，并且不会随着线程执行完毕而改变。
			线程的生命周期：
				一个线程在其生命周期中只有一次机会从新建状态转换为就绪状态，
				也就是说只能有一次机会被调度和执行。如果一个线程已经执行完毕
				或者被终止，那它就不能再次被启动，否则会违反线程的生命周期规则。

			线程的资源：
				一个线程在被创建时会分配一些资源，如栈空间、寄存器、程序计数器等。				如果一个线程已经执行完毕或者被终止，那么它的资源就会被回收，如果再				次调用start方法，就会导致资源不足或者冲突。
			
			线程的安全：
				一个线程在被创建时会有一些初始化操作，如设置优先级、分组、名称等。				如果一个线程已经执行完毕或者被终止，那么它的状态就会被清除，
				如果再次调用start方法，就会导致状态不一致或者错误。
	
	start方法不会阻塞当前线程，而是让新的线程和当前线程并发执行。


run方法
	用来定义线程要执行的任务的方法，它是Thread类的一个普通实例方法，可以被重写或者直接调用。
	
	如果直接调用run方法，不会启动一个新的线程，而是在当前线程中执行run方法中的代码。
	相当于调用了一个普通的方法，并不具有多线程的特性。

	一般来说，如果我们想要创建并启动一个线程，需要继承Thread类，并重写run方法，
	然后创建Thread子类的对象，并调用start方法。
	如：
		//定义一个Thread子类
		class MyThread extends Thread {
    			//重写run方法
    			@Override
    			public void run() {
        		//线程要执行的任务
        		System.out.println("Hello, Thread");
    			}
		}

		//创建并启动线程
		MyThread t = new MyThread();
		t.start(); //调用start方法，启动一个新的线程