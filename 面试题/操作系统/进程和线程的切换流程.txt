进程切换分两步:

	1	切换页表来使用新的地址空间,一旦去切换上下文,处理器中所有已经缓存的内存地址都作废了
	2	切换内核栈和硬件上下文

		对于linux,线程和进程最大区别在于地址空间,
		对于线程切换,第1步是不需要的,第二步是线程和进程切换都要做的

		因为每一个进程都有自己的虚拟地址空间,而线程是共享所在进程的虚拟地址空间的
		因此同一个进程中的线程,线程切换时不涉及虚拟地址空间



页表:	一种数据结构，用于将虚拟地址映射到物理地址。
		
		在每个进程中都有一个虚拟内存空间，该内存空间能使进程与进程间相互独立，互不影响。
		运行一个进程时，CPU先看到进程虚拟内存上的数据，再通过页表映射关系找到物理内存中代码和数据.
	

怎么理解处理器原来已经缓存的内存地址已经作废了
		 当进程切换时，只有用户页表被切换走，内核页表不改变.
			具体的做法:   	地址空间的高1G或2G的地址都固定划分给内核，用户进程只能用低3G或低2G的地址
						这样无论进程如何切换，内核页表都不需换出

		注意:	页表被切换时，处理器要重新加载新的页表以便正确地映射虚拟地址到物理地址。
		
		因此，在切换页表时，处理器中所有已经缓存的内存地址都作废了.


内核栈:	
		内核为每个进程分配的一块内存区域，用于保存进程在内核态执行时所使用的栈。


硬件上下文:
		CPU核心的寄存器数据，包括程序计数器、程序状态字、堆栈指针和通用寄存器等。
	

为什么进程上下文切换要切换内核栈和硬件上下文	
		当进程从用户态切换到内核态时，
			要将用户态下的硬件上下文保存到内核栈中，并将内核态下的硬件上下文加载到CPU寄存器中。
		这样做是为了保证进程在切换上下文后能够正确地恢复执行.

		注意:	进程切换上下文时，要保存和恢复进程的硬件上下文和内核栈。
			
			这是因为当进程从用户态切换到内核态时，要使用内核栈来保存进程在内核态执行时所使用的栈。
			而硬件上下文则是用来保存CPU核心的寄存器数据，以便在切换回用户态时能够正确地恢复执行




