数据库的设计原则

	指在创建数据库时遵循的一些规范和标准，以保证数据库的质量和性能。


数据库的设计原则有以下几点：

	一致性原则：保证数据一致性和有效性，对数据来源进行统一、系统的分析与设计，协调好各种数据源。

	完整性原则：保证数据正确性和相容性，对输入到数据库中的数据有审核和约束机制，防止不合语义数据。

	安全性原则：保证数据的安全性，防止非法用户或合法用户非法使用数据库造成数据泄露、更改或破坏，
				要有认证和授权机制。

	可伸缩性与可扩展性原则：
				保证数据库结构的设计应充分考虑发展需要、移植需要，有良好的扩展性、伸缩性和适度冗余。

	规范化原则：	保证数据库的设计遵循规范化理论，减少数据库插入、删除、修改等操作时的异常和错误，
				降低数据冗余度等。



相关概念：

数据库规范化理论：
		在设计数据库时遵循的一些规范和标准，以保证数据库的质量和性能。
		基本思想：
			消除关系模式中的数据冗余，解决数据插入、删除、更新时发生的异常，使数据库更灵活和可维护

	主要包括以下几个方面：

		数据依赖：	指关系模式中属性间的一种逻辑依赖关系，是现实世界属性间相互联系的抽象，
					是数据内在的性质。数据依赖有三种：函数依赖、多值依赖和连接依赖。

		码：			指关系模式中能唯一确定一个元组的属性或属性集合，是关系模式的标识符。
					码有以下几种类型：候选码、主码、外码、主属性、非主属性等。

		范式：		指关系模式满足一定条件的不同标准，反映了关系模式的规范化程度。
					有以下几种：
						第一范式、第二范式、第三范式、Boyce-Codd范式、第四范式、第五范式等

		规范化：		指用形式更简洁、结构更规范的关系模式取代原有关系模式的过程，
					是根据数据依赖和范式进行关系模式分解的方法。

关系模式：	
		是对关系的描述，包括关系名、属性名集合、属性所来自的域、属性向域的映射集合
		和属性间的依赖关系集合。
	
		可以形式化地表示为 		R(U,D,dom,F)
				其中R为关系名，U为属性名集合，D为域集合，dom为映射集合，F为依赖关系集合

关系模式中的一个元组
		指一张二维表中的一行数据。
		每个元组由若干个分量（即属性值）组成，且每个分量都属于相应属性所在的域。
		如学生表中，(20220314,江暮橙,18,女,自由系)是一个元组，由五个分量组成，且每个分量都符合
			相应域的取值范围。

数据依赖:
	
	指一个属性或属性组的值决定了另一个属性或属性组的值。主要有以下三种类型：

		函数依赖（Functional Dependency）：
			在一个关系中，对于某个元组，某个属性组的值能唯一确定另一个属性组的值，
				那就说后者函数依赖于前者。如学生表中，学号可以唯一确定姓名，那么姓名函数依赖于学号。

		多值依赖（Multivalued Dependency）：
			在一个关系中，对于某个元组，某个属性组的值能唯一确定另外两个互相独立的属性组的值，
				那么就说后两者多值依赖于前者。如课程表中，课程号可以唯一确定教师和教室，
			而教师和教室之间没有任何联系，那就说教师和教室多值依赖于课程号。

		连接依赖（Join Dependency）：
			在一个关系中，某个元组可以由该关系的若干投影（即子关系）重新连接而得到，
				那么就说该元组满足连接依赖。
				如成绩表中，每个元组都可以由该表按学号、课程号和成绩三个属性分别投影后再连接得到，
				那么就说每个元组满足连接依赖。



范式（Normal Form）
	指设计数据库时要遵守的一些规则或标准。
	范式有不同的级别，从第一范式到第五范式，每个范式都有其特定的规则和目标。

	范式之间是递进的关系，也就是后续的范式都基于前一个范式的基础上推行。范式主要有以下五种：

	第一范式（1NF）：
		要求每个属性都是不可分割的基本数据项，且每个元组都有唯一标识。
		这有助于消除数据冗余和提高数据质量。

	第二范式（2NF）：
		要求满足第一范式的基础上，消除非主属性对候选码（即能唯一标识元组的属性组）的部分依赖。
		这有助于减少数据冗余和避免数据异常。

	第三范式（3NF）：
		要求满足第二范式的基础上，消除非主属性对候选码的传递依赖。
		这有助于进一步减少数据冗余和保证数据一致性。

	第四范式（4NF）：
		要求满足第三范式的基础上，消除元组中存在的多值依赖。
		这有助于解决多对多关系的问题和避免数据冗余。

	第五范式（5NF）：
		要求在满足第四范式的基础上，消除元组中存在的连接依赖。
		这有助于解决多对多关系的问题和避免数据奇异化。




