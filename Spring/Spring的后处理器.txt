Spring的后处理器
	Spring的后处理器是Spring的对外开发扩展点,允许我们接入到Bean的整个实例化流程中,
		以达到动态注册BeanDefinition,动态修改BeanDefinition的作用

	这个的主要应用就是注解开发的起点,用后置处理器实现自定义注解扫描

	就是在Bean的创建流程中,穿插一些代码,对bean进行修改...

	主要有两种后处理器
	BeanFactoryPostProcessor:	
		Bean工厂后处理器,在BeanDefinitionMap填充完毕,Bean实例化之前执行

	BeanPostProcessor:
		Bean后处理器,在Bean实例化之后,填充到singletonObjects之前执行




BeanFactoryPostProcessor  Bean工厂后处理器:
	Bean工厂后处理器,在BeanDefinitionMap填充完毕,Bean实例化之前执行

	BeanFactoryPostProcessor是一个接口规范,实现该接口的类只要交给Spring容器管理,
		那么Spring就会回调该接口的方法,用于对BeanDefinition注册和修改的功能

	源码:
	@FunctionalInterface
	public interface BeanFactoryPostProcessor {
  void postProcessBeanFactory(ConfigurableListableBeanFactory var1) throws BeansException;
	}
		
	实现了 BeanFactoryPostProcessor 接口的类会被容器视为特殊的 bean 处理器。
	当容器启动时，会先实例化所有实现了 BeanFactoryPostProcessor 接口的类

	操作流程:
		创建一个类实现BeanFactoryPostProcessor接口
		将这个类在xml中注册bean
		实现其中的BeanFactoryPostProcessor方法
		可以用方法参数factory获取想要操作的bean,对bean进行设置修改
		(这个参数就是底层spring的bean信息对象BeanDefinition存放的地方,删改查都可以操作)
		其中如果想要新增bean,就要使用BeanFactoryPostProcessor的子接口					BeanDefinitionRegistryProcessor专门用于注册BeanDefinition操作
			可以创建一个类实现这个接口
		写想操作的代码即可
		
		在BeanDefinitionMap填充完毕,Bean实例化之前方法会自动执行


	应用:	用后处理器扩展点完成自定义注解扫描
		
		自定义@MyComponent注解,使用在类上
		用包扫描工具BeseClassScanUtils(网上找找)完成指定包的类扫描
		自定义后处理器完成注解@MyComponent的解析,解析后最终被Spring管理



BeanPostProcessor:Bean后处理器
		在Bean实例化之后,填充到singletonObjects之前执行

	操作流程
		创建类实现BeanPostProcessor接口
		将类注册在xml中注册bean
		实现两个方法,postProcessBeforeInitialization,postProcessAfterInitialization
			一个是初始化前执行,一个是初始化后执行
			初始化包括属性设置方法,初始化方法等


	应用:	对bean方法进行执行时间日志管理
		就是在后处理器中实现动态代理,实现日志自动处理



	