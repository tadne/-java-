JVM 中对象创建过程主要包括以下几个步骤：


	类加载检查：
		当 JVM 遇到一条 new 指令时，
		首先会检查这条指令的参数是否能在常量池中定位到一个类的符号引用，
		并且检查这个符号引用代表的类是否已经被加载、解析和初始化过。
		如果没有，那么 JVM 会先执行相应的类加载过程。

	分配内存：
		当类加载检查通过后，JVM 会为新创建的对象分配内存空间。
		对象所需的内存大小在类加载完成后就可以确定。
		JVM 有两种方式分配内存：
			指针碰撞和空闲列表。
			指针碰撞:	把堆内存分为已使用和未使用两部分，通过一个指针来划分，
					分配内存时需把指针向未使用部分移动一段与对象大小相等的距离			空闲列表:	把堆内存中的空闲空间用列表来记录，分配内存时从列表中找一块			空间划分给对象实例，并更新列表记录。

	初始化零值：
		内存分配完成后，JVM 会对分配的内存空间进行初始化，把所有的数据都设置为零值。
		保证对象的实例字段在 Java 代码中可以不赋初始值就直接使用，
		程序能访问到这些字段的数据类型所对应的零值。

	设置对象头：
		对象初始化零值完成后，JVM 会对对象进行必要的设置，
		如对象是哪个类的实例、如何找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。		这些信息存在对象头中。对象头的结构可能因为 JVM 的不同而有所差异。

	执行 init 方法：
		此时,从 JVM 的角度来看，一个新的对象已经产生了。
		但从 Java 程序的角度来看，对象创建才刚刚开始，因为所有的字段都还是零值，
		并没有按照程序员的意图进行初始化。
		因此，要执行对象的构造方法,对对象初始化，也就是执行 new 指令后的参数指定的init方法