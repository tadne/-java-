1）互斥条件：
		进程对所分配到的资源进行排他性控制，
		即一段时间内某,资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。

2）请求和保持条件：
		进程已经获得了至少一个资源，但又对其他资源发出请求，而该资源已被其他进程占有，
		此时该进程的请求被阻塞，但又对自己获得的资源保持不放。

3）不可剥夺条件：
		进程已获得的资源在未使用完毕之前，不可被其他进程强行剥夺，只能由自己释放。

4）环路等待条件：
		存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被 链中下一个进程所请求。
		即有一个都处于等待状态的进程集合{Pl, P2,..., pn},
				其中 Pi 等待的资源被 P(i+1) 占有，Pn 等待的资源被 P0占有



预防死锁的方式就是打破四个必要条件中的任意一个即可。

1）打破互斥条件：
		在系统里取消互斥。
		资源不被一个进程独占使用，那死锁是肯定不会发生的。
		但一般来说在所列的四个条件中，“互斥”条件是无法破坏的。
		因此，在死锁预防里主要是破坏其他几个必要条件，而不去涉及破坏“互斥”条件。。

2）打破请求和保持条件：
		1）采用资源预先分配策略，即进程运行前申请全部资源，满足则运行，不然就等待。
		2）每个进程提出新的资源申请前，必须先释放它先前所占有的资源。

3）打破不可剥夺条件：
		当进程占有某些资源后又进一步申请其他资源而无法满足，则该进程必须释放它原来占有的资源。

4）打破环路等待条件：
		实现资源有序分配策略，将系统的所有资源统一编号，所有进程只能采用按序号递增的形式申请资源。
