循环依赖:	两个或多个bean对象相互依赖对方，形成一个闭环，导致无法正常创建和初始化bean对象。

Spring框架中有一个很重要的特性，就是可以自动检测和解决循环依赖的问题

Spring是怎么解决循环依赖的？

Spring的解决方案主要是基于三级缓存的机制，即：

	一级缓存：	一个ConcurrentHashMap，用来存储已经创建并初始化完成的单例bean对象，
			即完整的bean对象。
		
			当从容器中获取一个bean时，首先会从这个缓存中查找。

	二级缓存：	一个ConcurrentHashMap，用来存储已经创建但未初始化完成的单例bean对象，
			即不完整的bean对象。
			
			当在初始化一个bean时，如果发现它有循环依赖的情况，
			就会将它提前暴露到这个缓存中，以供其他依赖它的bean使用。

	三级缓存：	一个ConcurrentHashMap，用来存储已经创建但未初始化完成的单例bean对象的
			工厂方法（ObjectFactory），
			即可以生成不完整的bean对象的方法。
			
			当我们在初始化一个bean时，如果发现它有循环依赖的情况，且需要进行代理处理			就会将它的工厂方法暴露到这个缓存中，供其他依赖它的bean使用。

Spring的解决流程主要分为以下几个步骤：

	当容器启动时，根据配置文件或注解来加载所有的bean定义，并注册到容器中。

	当容器实例化一个单例非懒加载的bean时，先从一级缓存中查找是否已经存在该bean对象，
		如果存在，则直接返回；如果不存在，则继续下一步。

	容器根据bean定义来创建一个新的bean对象，放入二级缓存中，移除三级缓存中对应工厂方法（如果有）

	容器对该bean对象进行属性赋值或依赖注入，
	如发现该bean对象依赖于另一个未创建或初始化完成的bean对象（存在循环依赖），
	则先从二级缓存中获取该依赖对象（如果有），
	或从三级缓存中获取该依赖对象的工厂方法并执行（如果有），
	或递归地创建该依赖对象（如果都没有）。

	容器会对该bean对象进行初始化操作，如调用初始化方法、执行后置处理器等。

	容器会将该bean对象从二级缓存中移除，放入一级缓存，移除三级缓存中对应的工厂方法（如果有）。

	容器会返回该bean对象给客户端。








