秒杀逻辑:

		查询优惠券==>判断秒杀库存==>查询订单==>校验一人一单==>减库存==>创建订单


		因为要多次查询数据库,效率低下


优化:	
		将判断秒杀库存和校验一人一单这两个查询数据库的操作变成查询redis来提高效率

		

进一步优化:
		
		再redis中将优惠券,用户,订单信息都存到阻塞队列中,开启独立线程执行

		这样异步的读取队列中信息,完成下单,就能很好的加快流程节约时间




在redis中判断订单的流程

		开始==>判断库存
			==>库存不足==>返回1表示库存不足==>结束
			==>库存充足==>判断用户是否下单
				==>下单了==>返回2表示只能下单一次==>结束
				==>没有下单==>扣减库存==>将用户id存到当前优惠券的set集合中==>返回0下单成功

		用lua脚本实现上述步骤保证原子性

	
	整体流程:
		开始==>执行lua脚本==>判断结果是否是0
				==>不是0==>返回异常信息
				==>是0==>将信息存入阻塞队列==>返回订单id==>结束



但是:	阻塞队列是有大小限制的
		并且数据部安全,如果服务宕机,那么消息队列中的数据会消失


所以可以使用消息队列来实现
	消息队列:		存储和管理信息,也叫消息代理
	生产者:		发送消息到消息队列
	消费者:		从消息队列中获取消息并处理

	redis提供了三种不同方式实现消息队列

	list结构:	基于list结构模拟消息队列	:模拟阻塞队列
	PubSub:	基本的点对点消息模型		:功能不完善
	Stream:	比较完善的消息队列模型		:功能完善


	





