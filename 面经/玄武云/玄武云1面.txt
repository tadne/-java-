请简单自我介绍一下...

说说springBoot的一些原理

		自动装配和自动配置
		springBoot其实就是开发商收集了一些程序员的编程习惯和技术栈,
		在底层提前写好了各个组件的默认配置
		
		底层表示的就是这个注解
		@SpringBootApplication注解:
			@SpringBootConfiguration,		配置获取
			@EnableAutoConfiguration,		配置启动
			@ComponentScan三个注解			组件扫描


说说线程和进程
	进程是资源分配的最小单位，
	线程是程序执行的最小单位（资源调度的最小单位）


	
说说hashMap底层原理,线程安全性,怎么解决
	
		hashMap底层是:	哈希表和红黑树,哈希表是数组+链表,红黑树是jdk8后出现的
			创建hashMap:	就是创建一个初始长度为16的数组
			添加一个元素:		就是先计算元素的哈希值,用哈希值和数组长度取余运算,
							根据这个结果放入数组中.
							如果对应位置有值的情况下,先比较是否相同,如果相同就不存,不同就存
							如果不同,就加入链表,挂在原来的链表下面
							如果数组长度超过了64并且链表长度超过了8 ,就会将链表转换为红黑树
							相比于链表,红黑树的效率更高
							另外,hashMap的扩容因子是0.75,当数组填充率达到0.75的时候,就触发扩容
							扩容会将数组长度扩充到原来的两倍
							

说说concurrentHashMap的实现原理
		用了分段锁的技术，将哈希表分成若干个段（Segment），每个段都有自己的锁，
			在进行写操作时，只需要锁住对应的段，而不影响其他段的并发访问。

		用了CAS（Compare And Swap）的无锁算法，
			主要是获取锁失败后不断获取锁,在一段时间都获取失败后停止
			来实现对节点数组和头节点的原子更新，避免了加锁的开销。
		用了volatile修饰符，来保证节点数组和节点的属性在多线程之间的可见性和有序性。
		用了红黑树来优化链表，当链表的长度超过一定阈值时，会转换成红黑树，提高查询效率。



说说面向对象的设计原则
(这段没有回答好,因为完全没有了解过,但是我知道几个设计模式,所以面试官问了适配器设计模式)
	单一职责原则：	一个类或者一个方法应该只有一个职责，避免过于复杂和臃肿。

	开闭原则：		一个实体（类，模块，方法等）应该对扩展开放，对修改关闭，	
					即在不修改原有代码的基础上能够增加新的功能。
	
	里氏替换原则：
				一个子类或者子类型应该能替换它们的父类或者父类型，而不影响原有程序的正确性和功能。

	依赖倒置原则：	
				高层模块不应该依赖于低层模块，而是都应该依赖于抽象；
				抽象不应该依赖于细节，细节应该依赖于抽象。

	接口隔离原则：
				客户端不应该被强迫依赖于它们不使用的接口，接口应该尽可能小，而且高内聚。

	组合/聚合复用原则：
				尽量使用组合或者聚合的方式来复用已有的对象，而不是通过继承来复用。

	迪米特法则：
				一个对象应对其他对象有尽可能少的了解，只与与自己直接相关的对象交互，降低类之间的耦合
	

适配器模式:
			在一个类要获取接口中的某一个方法而不想实现其他方法的时候
			实现:	先定义一个适配器类,空实现接口中的所有方法,再用原来那个类继承该类即可
			好处:	避免了代码污染,符合单一职责原则: 一个类或方法只有一个职责,避免过于臃肿复杂
				可以解耦目标接口和适配者类，使它们不需要直接依赖，提高了系统的可维护性和可扩展性。
				可以复用现有的适配者类，而不需要修改它们的源代码，节省了开发成本和时间。
				可以增加类的透明性，让客户端只需关注目标接口，而不需了解适配者类的具体实现。
				可以灵活地切换不同的适配者类，满足不同的业务需求，符合开闭原则。


说说mysql的底层数据结构
		B+树和B树区别：
			B+树的非叶子节点只存储了索引，数据都存储在叶子节点中。
			B+树的每个节点的子节点数目比关键字数目多一个。
			B+树的叶子节点之间通过指针连接成一个有序链表。
			B+树的搜索一定要到达叶子节点才结束。
		B+树相比B树优势 ：
			B+树的查询性能更稳定，每次查询都要遍历到叶子节点，所以每次查询的时间复杂度都相同。
			B+树的非叶子节点只存索引，所以每个节点可以存储更多的关键字，降低了树的高度和磁盘IO次。
			B+树的叶子节点之间通过指针连接，可以方便地进行范围查询和排序操作。
			B+树更适合动态插入和删除操作，不需要像B树那样频繁地进行旋转和分裂操作来维持平衡
		MySQL选择了B+树作为其索引结构，
				是因为B+树能够提高查询效率和空间利用率，同时也能支持范围查询和排序操作。

		MySQL对B+树进行了一些优化，例如:
			使用聚簇索引来存储主键索引和数据在同一个页中，从而减少磁盘IO次数
			使用前缀压缩来减少非叶子节点中索引占用的空间，从而增加每个节点存储的索引数量
			使用自适应哈希索引来缓存热点数据的哈希值，从而加速等值查询操作
			使用缓冲池来缓存常用的页，从而减少磁盘IO次数
			

说说jvm里有哪些线程私有的结构
		程序计数器：
				记录当前线程执行的字节码指令的地址。

				每个线程都有自己的程序计数器，当线程切换时，程序计数器也会随之切换，
				以保证线程能够恢复到正确的执行位置。
				如果线程执行的是Java方法，程序计数器记录的是正在执行的虚拟机字节码指令的地址；
				如果线程执行的是本地方法，程序计数器的值为空。

		虚拟机栈：
				一个由栈帧组成的数据结构，每个栈帧包含了局部变量表、操作数栈、动态链接、
					方法出口等信息。
				每个线程在执行Java方法时都会创建一个栈帧，并压入虚拟机栈中，
					方法调用和返回就是栈帧入栈和出栈的过程。

		虚拟机栈是线程私有的，每个线程都有自己的虚拟机栈，它们之间互不影响。

		本地方法栈：
			与虚拟机栈类似，由栈帧组成的数据结构，但是本地方法栈是为本地方法服务的。
			本地方法是用其他语言编写的方法，不受Java虚拟机规范的约束。
			本地方法栈也是线程私有的，每个线程都有自己的本地方法栈。