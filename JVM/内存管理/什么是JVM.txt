JVM是什么?
		
	Java Virtual Machine:		java 程序的运行环境(java二进制字节码运行环境)
			
	好处: 
	     跨平台性：	Java编写时不针对操作系统或平台。JVM将字节码翻译成机器码，实现跨平台兼容性。
					一次编译,到处运行

		自动内存管理：JVM提供垃圾回收机制，可以自动管理内存，回收不再使用对象，防止内存泄漏。
					有助于减少内存管理错误和提高应用程序的稳定性。

		强类型检查： 	Java是一种强类型语言，JVM在编译时执行严格类型检查，以避免类型错误。
					有助于减少运行时错误，并增加代码的可靠性。

		安全性： 		JVM提供安全性管理和沙盒机制，限制Java程序权限，防止对底层系统产生不良影响。
					有助于确保Java应用程序的安全性。

		性能优化： 	JVM运行时执行许多性能优化，如即时编译和热点代码分析，提高Java程序的执行速度。
				    使Java程序在某些情况下可以与原生应用程序一样快。

		多线程支持：   Java和JVM具有强大的多线程支持，可以轻松实现多线程应用程序

		动态性和反射： JVM提供反射机制，允许程序在运行时检查和操作类、方法和字段。
					为某些类型的应用程序提供了更大的灵活性。

	       多态:			
			提供虚方法表和方法重载重写
			类在方法区都有方法表,存方法和对应代码地址
				方法重载就是同一个类中定义同名方法(参数返回值不同)		
				方法重写就是重新定义父类方法,覆盖父类的行为(实际就是覆盖虚方法表)

			当JVM要调用某个对象的某个方法时，会先从对象头中获取该对象所属类的类型信息
			再根据常量池中的符号引用找到该类的方法表，再据方法表中的索引找到具体代码
			地址，最后执行该地址处的代码。实现根据对象的实际类型来调用相应的方法。
			
		
	比较:	jvm,jre,jdk
	
		JVM 虚拟机:				屏蔽java文件和底层的操作系统的差异	
		JRE java运行环境:			JVM+基础类库	
		JDK java开发工具包:		JVM+基础类库+编译工具

		即:	jre= 	jvm	+ 基础类库				:	java运行所必须的环境
			jdk= 	jvm	+ 基础类库	+ 编译工具   	:	java开发所必须的开发工具包
			JavaSe=	jvm	+ 基础类库	+ IDE工具
			JavaEE=	jdk	+ 应用服务器  + IDE工具
		



学jvm有啥用?
	面试
	理解底层的实现原理
	中高级程序员的必备技能

掌握什么?
	1. JVM 内存结构的组成、各部分功能作用，学会利用内存诊断工具排查内存相关问题；
	2. JVM 的招牌功能-垃圾回收机制是如何工作的，如何进行垃圾回收调优；
	3. Java 程序从编译为字节码到加载到运行的全流程，各个阶段的优化处理；
	4. 了解 Java 内存模型相关知识，见识多线程并发读写共享数据时的问题和 Java 的解决方案



路线:	内存结构		方法区,Heap堆,JVM虚拟机栈,程序计数器,本地方法栈
		执行引擎		interpreter解释器,JIT即时编译器,GC垃圾回收
		类加载器		ClassLoader		
		
	
	