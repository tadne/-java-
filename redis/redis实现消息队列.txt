消息队列:		存储和管理信息,也叫消息代理
			队列是先进先出

消息队列:		
	生产者:		发送消息到消息队列
	消费者:		从消息队列中获取消息并处理

	redis提供了三种不同方式实现消息队列

	list结构:	基于list结构模拟消息队列	:模拟阻塞队列
	PubSub:	基本的点对点消息模型		:功能不完善
	Stream:	比较完善的消息队列模型		:功能完善

	

lRedis的ist结构实现消息队列	
		redis的list结构是一个双向链表,很容易模拟队列效果,先进先出
	
			但是要注意的是,当队列中没有消息时,rpop和lpop会返回null,不像jvm的阻塞队列那样阻塞等待

			因此这里使用brpop或blpop来实现阻塞效果

	
		优点:	利用redis储存,不受限于jvm内存上限
				基于redis的持久化机制,数据安全性有保证
				可以满足消息有序性

		缺点:	无法避免消息丢失
				只支持单消费者	
	

基于PubSub的消息队列:		redis2.0版本引入的消息传递模型
						消费者可以订阅一个或多个channel
						生产者向对应channel发送消息后,所有订阅者都能收到相关消息

		subscribe channel [channelName]:	订阅一个或多个通道
		publish channel msg:				向一个频道发送消息
		psubscribe pattern [pattern]:		订阅与pattern格式匹配的所有频道


		优点:	采用发布订阅模型,支持多生产,多消费
		缺点:	不支持数据持久化
				无法避免消息丢失
				消息堆积有上限,超出时数据丢失


		缺点比较多,	不适合对可靠性要求较高的消息模式



基于Stream的消息列表	
	Stream是redis5.0版本引入的一种数据类型,可以实现一个功能非常完善的消息队列


Stream的单消息模式:

	发送消息的命令:
		xadd  key [nomkstream] [maxlen|minid [=|~] threshold [limit count]] *|id [field value...]
			nomkstream:		   		 					队列不存在是否创建,默认自动创建
			[maxlen|minid [=|~] threshold [limit count]]:		设置消息队列的最大消息数,默认无上限
			* id:								消息的唯一id,*表示redis自动生成,格式是时间戳-递增数字
		
		例:	xadd users * name jack age 21
			
	读取消息的命令:
		xread [COUNT count] [Block milliseconds] streams key [key...] ID [ID ...]
		Count count :						每次读取消息的最大数量
		Block milliseconds:				没有消息时,是否阻塞,阻塞时长
		streams key						要从哪个队列读取消息,key就似乎队列名
		ID:			填起始id				只返回大于该id的消息
					0:					代表从第一个消息开始
					$:					代表从最新消息开始

		但是在steam中,不会删除消息,可以重复读


		注意:	当指定起始id为$的时候,获取的是最新消息,即队列中最后一条消息
				如果处理消息的过程中,又有超过1条以上的消息插入,
				则下次获取时也只能获取到最新的一条,会出现漏读消息的问题

	特点:	消息可回溯
			一个消息可以被多个消费者读取
			可以被阻塞读取
			有消息漏读风险


Stream的消费者组:		将多个消费者划分到一个组中,监听同一个队列,具备以下特点:

		消息分流:		队列中的消息会分流给组内的不同消费者,而不是重复消费,加快消息处理速度
		消息标识:		消费者组会维护一个标识,记录最后一个被处理的消息,哪怕消费者宕机,
					还会从标识中读取消息,确保每一个消息都被消费
		消息确认:		消费者获取消息后,消息处于pending状态,并存入一个pendin-list.
					当处理完成后要通过XAVK来确认消息,标记消息为已处理.才会从pending-list移除
			
	创建消费者组:		xgroup create key groupName ID [mkstream]
					key:				队列名称
					groupName:		消费者组名
					ID:				起始id表示,$ 表示队列中的最后一个消息,0表示队列中的第一个消息
					mkstream:		队列不存在时自动创建队列

	删除指定消费者组:					xgroup destory key groupName
	给指定消费者组添加消费者:			xgroup createConsumer key groupName consumername
	删除消费者组中的指定消费者:			xgroup delConsumer key groupName consumerName
	
	从消费者组读取消息:		
			xreadGroup GROUP group consumer [COUNT count] [Block milliseconds] [NOACK] 
					streams key [key...] ID [ID ...]		

			group :				消费者组名称
			consumer:			消费者名称,如果不存在会自动创建一个
			count:				本次查询的最大数量
			Block milliseconds:	阻塞最大时间
			NOACK:				无需手动ACK,获取消息后自动确认
			streams key:			指定队列名称
			ID:					获取消息的起始id:		
					'>':	从下一个位消费的消息开始 
					其他: 根据指定id获取已消费单未确认的消息,如0,是从pending-list中的第一个消息开始


	完成任务后确认消息:	xack Consumer Group ID



	特点:		消息可回溯, 消息被消费后不会被删除
				可以多消费者竞争消息,加快消费速度
				可以阻塞读取
				没有消息漏读的风险,通过维护的标记可以找到上一条消费的消息
				有消息确认机制,保证消息至少被消费一次
		


总结:		Redis消息队列
			

						list				PubSub				Stream
	
	消息持久化			支持				不支持				支持
	
	阻塞读取				支持				受限于消费者缓冲区	支持
	
	消息堆积处理		受限于内存空间		不支持				受限于队列长度,
					可以多消费者加快处理						可用消费者组提高处理速度
	
	消息确认机制			不支持			不支持				支持

	消息回溯				不支持			不支持				支持


但是redis的持久化技术有信息丢失风险,如果对信息要求非常高,还是推荐使用RabbitMQ等工具













	




