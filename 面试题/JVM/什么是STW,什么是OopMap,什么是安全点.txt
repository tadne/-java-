Stop The World 	一种用于暂停 Java 程序的执行的行为，
		通常发生在垃圾回收（GC）的过程中，为让 GC 能够正确地回收和移动对象，
		要让所有的 Java 线程都停止运行，只有 GC 线程在工作。
	
		Stop The World 的时间取决于 GC 的算法和堆内存的大小
		一般来说，Stop The World 的时间越短越好，因为它会影响程序的响应速度和吞吐量。
	
	
	是一种无法避免的现象，但可通过选择合适的 GC 算法和调整堆内存的大小来减少发生频率和持续时间。
	
	如，使用并行 GC（Parallel GC）或并发 GC（Concurrent GC）可以利用多核 CPU 的优势，
	提高 GC 的效率；使用分代收集算法（Generational Collection）可以根据对象的生命周期
	将堆内存划分为新生代和老年代两个区域，并分别采用不同的回收策略，减少全堆扫描的次数。
	
OopMap:		一种用于描述 Java 对象在内存中的布局和引用信息的数据结构，
		可以帮助垃圾回收器（GC）准确地定位和识别对象中的引用字段，进行正确的回收和移动。
		OopMap 全称是 Ordinary Object Pointer Map，意思是普通对象指针映射。
	
安全点:		一种用于暂停 Java 线程的位置，
			可以保证在该位置，线程的执行状态是可被 GC 确定的，
			也就是说，GC 可以知道线程中的所有引用变量的值和位置。
	
		安全点通常出现在方法调用、循环跳转、异常跳转等位置。
		
		STW 和 OopMap 和安全点都是实现准确式垃圾回收而设计的技术，
		可以让 GC 在回收对象时不会出现误判或遗漏的情况。
	
安全区域		一种用于暂停线程的范围，可以保证在该范围内，线程的执行状态是可以被 GC 确定的，
		也就是说，GC 可以知道线程中的所有引用变量的值和位置。
		安全区域通常出现在执行长时间循环等操作时。
	
	当 GC 要暂停所有线程时，会向所有线程发送信号，在遇到下一个安全点或者安全区域时停止运行。
	如果一个线程已经在安全点或者安全区域内，那么它会立即停止运行；
	如果一个线程还没有到达安全点或者安全区域，那么它会继续运行直到到达为止。
	
	这样，GC 就可以保证所有线程都处于可确定状态，然后进行对象的回收和移动
	
	