线程的生命周期

	线程的生命周期就是线程对象的状态

	可以通过getState方法获得,线程的状态是Thread.State() 枚举类型定义

	有以下几种:
		New:		新建状态,创建线程对象之后,在调用start()之前的状态

		Runnable:	可运行状态,是一个复合状态,包含Ready和Running两个状态
			ready:			表示线程正在抢cpu
			running:		表示线程正在执行
					yield()方法可以将线程从running状态变成ready状态

		Rlocked:	阻塞状态,线程发起阻塞IO操作,或申请由其他线程占用资源(锁),
				线程会变成Blocked状态,处于阻塞状态的线程不会占用cpu资源,
				当阻塞式IO操作执行完,或者线程获得了其申请的资源(锁),
				线程切换为Runnable状态

		waiting:	等待状态,线程执行了wait方法或者join方法,
				会将线程转换为waiting状态
				执行notify方法,或者加入的现在执行完毕,
				当前线程会转换为Runnable状态
		
		Timed_waiting:	与waiting状态类似,但是区别是,处于该状态的线程不会无限等待,如果线				程没有在指定时间内没有完成期望操作,该线程会转换为Runnable状态

		Terminated:	终止状态,线程run方法运行结束处于终止状态



生命周期总结(java实际上没有运行状态的,这里方便理解)(因为运行状态其实是线程交给虚拟机操作了)

		新建:	创建对象
		
		就绪:	新建start方法	运行状态没抢到cpu	  阻塞获取锁对象
			等待notify()方法		睡眠时间到了			

		运行:	就绪抢到cpu

		等待:	运行wait()方法	

		睡眠:	运行sleep()方法
	
		阻塞:	无法获得锁对象

		死亡:	run方法执行完毕

