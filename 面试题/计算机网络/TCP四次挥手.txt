理解版:
	
		建立TCP连接要三次回收,而终止一个TCP要四次挥手.
		这是因为TCP的半关闭特性造成的,
				即TCP提供了连接的一端在接受它的发送后还能节后来自另一端的数据的能力
		TCP连接的释放需要发送四个包,因此叫做四次挥手,客户端后服务端都可主动发起挥手动作



第一次挥手:		客户端发送FIN报文(FIN=1) ,报文中会指定一个序列号seq =u.
				停止发送数据,主动关闭TCP连接.此时客户端处于FIN-WAIT-1状态,等待服务端确认

第二次挥手:		服务端收到FIN后,会发送ACK报文,并将客户端的序号值+1作为ACK报文的序列号值
				表示已经收到客户端报文,此时服务端处于CLOSE_WAIT状态

第三次挥手:		如果服务器也想断开连接(即没有要发送给客户端的数据时),
				就和客户端的第一次挥手一样,发送FIN报文,且指定一个序列号
				此时服务器处于LAST_ACK状态,等待客户端确认

第四次挥手:		客户端收到FIN后,发送ACK作为应答(ack=w+1),且将服务端的序列值+1作为ACK报文的序号值,
				此时客户端处于TIME_WAIT状态





FIN-WAIT-1 : 			等待远程TCP的连接中断请求，或先前的连接中断请求的确认；
CLOSE-WAIT:			等待从本地用户发来的连接中断请求；
				此时的 TCP 处于半关闭状态，客户端到服务端的连接释放。
				客户端收到服务端的确认后，进入FIN_WAIT2（终止等待 2）状态，
				等待服务端发出的连接释放报文段。
FIN-WAIT-2:			从远程TCP等待连接中断请求；
LAST-ACK:			等待原来发向远程TCP的连接中断请求的确认；
TIME-WAIT:			等待足够的时间以确保远程TCP接收到连接中断请求的确认；





为什么要四次挥手?


	简单地说，是因为TCP是全双工模式，前两次挥手只是关闭了一个方向的数据通道，
		后两次挥手用于关闭另一个方向的数据通道。

	也就是先前两次关闭客户端向服务端的数据通道
	后两次关闭关闭服务端到客户端的数据通道








